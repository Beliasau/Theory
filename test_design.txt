			Техники тест-дизайна

	задачами тест-дизайна являются:
Анализ требований и рисков тестирования
Определение проверок для тестирования
Формализация проверок в виде тестовых сценариев
Приоритезация проверок
Определение подходов к тестированию




	Тестирование на основе классов эквивалентности (equivalence partitioning) 

— это техника, при которой мы разделяем функционал 
(часто диапазон возможных вводимых значений) на группы эквивалентных по своему влиянию на 
систему значений.
Такое тестирование больше всего подходит для систем, в которых
большая часть входных данных принимает значения в пределах диапазонов или из наборов данных. Оно
базируется на предположении, что данные из одного и того же класса эквивалентности по сути,
обрабатываются в системе одинаковым образом. Самым простым способом проверить это предположение
является спросить программиста о его реализации(в коде)
Тестирование классов эквивалентности​ - это техника, используемая для уменьшения числа тестовых
наборов до выполнимого уровня при сохранении приемлемого уровня покрытия тестами. 
Класс эквивалентности представляет собой набор данных, которые либо одинаково обрабатываются модулем, 
либо их обработка выдает одинаковые результаты. При тестировании любое значение данных, 
входящее в класс эквивалентности, аналогично любому иному значению класса
● от 0 до 15 
● от 16 до 18​ 
● от 19 до 55​ 
● от 56 до 99​





	Техника анализа граничных значений (boundary value testing) — 

это техника проверки поведения продукта на крайних (граничных) значениях входных данных.
Для использования тестирования граничных значений есть простые шаги.
	1 нужно определить классы эквивалентности. 
	2 нужно определить границы каждого класса эквивалентности.
	3 создать тест-кейсы для каждого граничного значения, выбрав одну точку на границе, одну точку
	  чуть ниже границы и одну точку чуть выше границы
Тестирование граничных значений в равной степени применимо на модульном, интеграционном,
системном и приемочном уровнях тестирования. Для тестирования граничных значений требуются входные
значения, которые могут быть разделены на классы и границы, которые могут быть определены на основе
системных требований





	Попарное тестирование (pairwise testing) 

используется при большом количестве входящих даных
например сайт должен работать при помощи:
○ 8 браузеров
○ 3 плагина
○ 6 клиентских операционных систем
○ 3 сервера
○ 3 серверных операционных системы
○ 1296 комбинаций
это техника формирования наборов тестовых данных из полного набора входных данных в системе, 
которая позволяет существенно сократить количество тест-кейсов.
Одна из гипотез заключается в том, что большинство дефектов являются
либо одиночными (тестируемая функция просто не работает и любой тест на эту функцию найдет дефект),
либо двойными (это пара из функции/модуля, с которыми функция/модуль проваливаются, хотя все
остальные пары выполняются успешно). Попарное тестирование определяет минимальный набор, который
поможет нам проверить все одиночные и попарные дефекты
Использование всех пар для создания тест-кейсов основывается на двух техниках 
	1 ортогональных массивах​   
	2 алгоритме Allpairs.(генерирует пары непосредственно, не прибегая к таким «внешним» 
устройствам, как ортогональный массив.(http://www.satisfice.com	    https://pairwise.teremokgames.com/))
Ортогональный массив - это двумерный массив, с таким интересным свойством - выберите любые
два столбца в массиве. В каждой паре столбцов будут встречаться все комбинации значений этих
столбцов, но и, если любая пара встречается в массиве несколько раз, то все остальные пары будут 
встречаться такое же число раз

	1   2   3

1	1   1   1
2	1   2   2
3	2   1   2
4	2   2   1

Использование ортогональных массивов
1. Определите переменные​.
2. Определите количество значений, которое может принимать каждая переменная​.
3. Определите ортогональный массив, у которого будет столбец для каждой переменной
(каждый столбец ортогонального массива имеет столько же вариантов значений, сколько имеет
ваша переменная).
4. Спроецируйте задачу тестирования на ортогональный массив.​
5. Постройте тест-кейсы
существуют определенные  ортогональные массивы (это справочная информация)
нужно подобрать ближайший, чуть больший, подходящий массив!
что делать с лишними столбцами и строками в массиве???
	1 лишние столбцы нужно удалить.
	2 в строках- замените лишние клетки на любые допустимые значения для переменной




 

	Тестирование на основе состояний и переходов (State-Transition Testing) 		

применяется для фиксирования требований и описания дизайна приложения.
таблицы и диаграмы состояний и переходов - как способ документирования поведения системы.
Преимущество таблицы состояний и переходов в том, что в ней перечисляются все возможные комбинации
состояний и переходов, а не только допустимые.
Информация в диаграммах состояний и переходов легко может быть использована для создания тестов.
		уровни покрытия:
	1. Набор тестов, в котором все СОСТОЯНИЯ будут посещены как минимум один раз
	(Обычно это низкий уровень тестового покрытия.)
	2. Набор тестов, в котором все СОБЫТИЯ​ выполнятся как минимум один раз
	3. Набор тестов, в котором все ПУТИ​ будут пройдены как минимум один раз. Несмотря на то, что 
	этот уровень является наиболее предпочтительным из-за его уровня покрытия, это может 
	быть неосуществимо
	4. Набор тестов, в котором все ПЕРЕХОДЫ​ будут осуществлены как минимум один раз. Этот уровень
	тестирования обеспечивает хороший уровень покрытия без порождения большого количества
	тестов. Этот уровень, как правило, один из РЕКОМЕНДОВАНЫХ!!!!!!
● Состояние​ (изображается в виде круга) - это состояние, в котором система ожидает возникновения
одного или нескольких событий
● Переход​ (изображается в виде стрелки) - это изменение состояния из одного в другое,
произошедшее благодаря какому-то событию
● Событие​ (представлено надписью над стрелкой перехода) - что-то, что вызывает изменение
состояния системы. Обычно это событие во внешнем мире, информация о котором вводится в
систему через её интерфейс. Некоторые события генерируются внутри системы
● Действие​  - это операция, которая вызвана изменением состояния. 
	





	Таблицы принятия решений (Decision Table Testing)  

техника тестирования, основанная на методе чёрного ящика, которая применяется для систем со сложной 
логикой.Таблицы решений​ являются превосходным инструментом для сбора определенных видов требований
системы и для документирования внутреннего устройства системы. Они используются для записи сложных
бизнес-правил, которые должна реализовывать система. Кроме того, тест-кейсы могут быть созданы 
непосредственно из таблицы решений.
пример

			Правило 1 Правило 2 ... Правило p
Условия

Условие-1

Условие-2

...

Условие-m
=======================================================

			Правило 1 Правило 2 Правило 3 Правило 4
Условия

Состоит в браке?	 Да 	     Да        Нет 	Нет
Хороший студент? 	 Да 	     Нет 	Да 	Нет

Действия

Скидка ($) 		 60 	      25 	50 	0

При тестировании для каждого правила создаётся как минимум один тест-кейс. Если состояния этого
правила бинарные, то должно быть достаточно одного теста для каждого сочетания. С другой стороны,
если состояние является диапазоном значений, то тестирование должно учитывать и нижнюю, и высшую
границы диапазона. Таким образом мы объединяем идею тестирования граничных значений с
тестированием таблиц решений
Тестирование таблиц решений может использоваться всякий раз, когда система должна реализовывать
сложные бизнес-правила.







	Доменный анализ (Domain Analysis Testing) 

Domain-тестирование​ - это техника, которая может применяться для определения эффективных и
действенных тест-кейсов, когда несколько переменных могут или должны тестироваться вместе. Она
использует и обобщает тестирование классов эквивалентности и граничных значений в n одномерных
измерениях.
Domain-тестирование облегчает одновременное тестирование нескольких переменных. Это
полезно, потому что у нас редко будет достаточно времени на создание тест-кейсов для каждой
переменной в наших системах. Их просто слишком много. Кроме того, переменные часто
взаимодействуют. Если значение одной переменной ограничивает допустимые значения другой, то
некоторые дефекты не могут быть обнаружены путем тестирования их по отдельности.







	Сценарий использования (Use Case Testing)(Тестирование вариантов использования)
 
Use Case описывает сценарий взаимодействия двух и более участников 
(как правило — пользователя и системы).
Вариант использования​ - это сценарий, который описывает использование системы действующим
лицом для достижения определенной цели. "Действующим лицом" является пользователь,
играющий свою роль с уважением к системе, который стремится использовать систему для
достижения чего-то важного внутри конкретного контекста. 
Сценарий представляет собой последовательность шагов, которые описывают взаимодействия 
между действующим лицом и системой.
	Основное правило  
● это создать как минимум один тест-кейс для основного успешногосценария, и как минимум по одному 
● тест-кейсу для каждого ответвления.
	плюсы использования тест-ия вариантов использования:
● позволяют выявить функциональные требования системы с точки зрения пользователя 
● Могут быть использованы для активного вовлечения пользователей в процесс сбора требований 
● Предоставляют базис для идентификации ключевых компонентов системы, структур, баз данных и
связей.
● Служат основанием для разработки тест-кейсов системы на приемочном уровне.





