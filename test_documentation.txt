			Тестовая документация — 
это набор документов, создаваемых перед началом процесса тестирования и непосредственно в процессе. 
Эти документы описывают покрытие тестами и процесс выполнения тестов, 
в них указываются необходимые для тестирования вещи, приводится основная терминология и т. д.


			тест план (test plan)
План тестирования описывает все действия по тестированию в рамках одного проекта. 
Здесь информация обо всем, что нужно сделать тестировщику или команде QA в ходе проекта. 
В каждом плане тестирования указывается объект тестирования, график работы, 
критерии начала и окончания тестирования, стратегия, риски и список выполненных работ.
Также часто в (test plan) включается стратегия тестирования, график релизов на  несколько 
ближайших спринтов. В зависимости от команды бывает разная степень детализации (test plan) 
и его могут делать разные люди в команде.(ьенеджер или тестировщик мидл+)
Обычно план тестирования делается до начала тестирования и до момента релиза.
имеет разный форм-фактор;
составляется не более, чем на 2-х страницах;
	виды тест плана
мастер (для всех команд на одном проекте)
детальный (для каждой команды итерации, релиза)
план приемочных испытаний
	Тест план должен отвечать на следующие вопросы:
Что необходимо протестировать?
Как будет проводиться тестирование?
Когда будет проводиться тестирование?
Критерии начала тестирования.
Критерии окончания тестирования.
	структура тест плана:
виды тестирования
приоритет тестирования
стратегия тестирования
окружение
задачи тестировщиков(что может делать тестер на проекте)
тестовая документация
техники тест-дизайна
баг-трекинг
критерии начала и окончания тестирования
инструменты для работы(Jira. таблицы Excel. Postman и тд)
оценки качества\ метрики

ссылки
https://habr.com/ru/company/true_engineering/blog/428053/  (это тест план, не тест стратегия!!)
https://testmatick.com/ru/kak-pisat-plan-testirovaniya/
http://www.protesting.ru/testing/plan.html





			Тест дизайн (Test Design) 





			тестовая стратегия
может быть отдельным документом либо же частью тест-плана
	этапы тест-стратегии
сбор информации
анализ информации
принятие решений (какие виды тестирования будут применятся в проекте)
презентация(менеджменту или команде, разрабам, тестировщ, бизнес аналитику)
	кто составляет
менеджер
тестировщик(уровня Middle+)
	что включает?
цель тестирования
(для чего будет использоваться конретный вид тестирования, чтобы добится результата)
информация о продукте
виды тестирования
критерии начала и окончания тестирования



			чек лист (checklist)
список проверок
это документ, который описывает что должно быть протестировано. Чек-лист может быть 
абсолютно разного уровня детализации.
Чаще всего чек-лист содержит только действия, без ожидаемого результата. Чек-лист менее формализован.






			тест кейс
Тест-кейс — это последовательность шагов, которые приводят к какому-то результату.
	Атрибуты тест-кейса:
предусловия (опционально, если они требуются для тест-кейса);
идентификатор (уникальный номер, по которому вы сможете найти этот тест-кейс и на него сослаться);
название сценария (какое-то краткое, но ёмкое);
ссылка на требования ;
шаги сценария;
ожидаемый результат;
фактический результат (опционально).







тестовый набор






пользовательская история (User Story)





			баг репорт(bug report)
Дефект (bug) — отклонение фактического результата от ожидаемого.
Отчёт о дефекте (bug report) — документ, который содержит отчет о любом недостатке в 
компоненте или системе, который потенциально может привести компонент или систему к 
невозможности выполнить требуемую функцию.
	Атрибуты отчета о дефекте:
Уникальный идентификатор (ID) — присваивается автоматически системой при создании баг-репорта.
Тема (краткое описание, Summary) — кратко сформулированный смысл дефекта, отвечающий на вопросы: 
Что? Где? Когда(при каких условиях)?
Подробное описание (Description) — более широкое описание дефекта (указывается опционально).
Шаги для воспроизведения (Steps To Reproduce) — описание четкой последовательности действий, 
которая привела к выявлению дефекта. В шагах воспроизведения должен быть описан каждый шаг, 
вплоть до конкретных вводимых значений, если они играют роль в воспроизведении дефекта.
Фактический результат (Actual result) — описывается поведение системы на момент обнаружения дефекта 
в ней. чаще всего, содержит краткое описание некорректного поведения
(может совпадать с темой отчета о дефекте).
Ожидаемый результат (Expected result) — описание того, как именно должна работать система в соответствии с 
документацией.
Вложения (Attachments) — скриншоты, видео или лог-файлы.
Серьёзность дефекта (важность, Severity) — характеризует влияние дефекта на работоспособность приложения.
Приоритет дефекта (срочность, Priority) — указывает на очерёдность выполнения задачи или 
устранения дефекта.
Статус (Status) — определяет текущее состояние дефекта. Статусы дефектов могут быть разными в разных 
баг-трекинговых системах.
Окружение (Environment) – окружение, на котором воспроизвелся баг.
		Severity vs Priority
Серьёзность (severity) показывает степень ущерба, который наносится проекту существованием дефекта. 
Severity выставляется тестировщиком.
Градация Серьезности дефекта (Severity):
	Блокирующий (S1 – Blocker)
тестирование значительной части функциональности вообще недоступно. Блокирующая ошибка, 
приводящая приложение в нерабочее состояние, в результате которого дальнейшая работа с 
тестируемой системой или ее ключевыми функциями становится невозможна.
	Критический (S2 – Critical)
критическая ошибка, неправильно работающая ключевая бизнес-логика, дыра в системе безопасности, 
проблема, приведшая к временному падению сервера или приводящая в нерабочее состояние некоторую 
часть системы, то есть не работает важная часть одной какой-либо функции либо не работает 
значительная часть, но имеется workaround(обходной путь/другие входные точки), позволяющий 
продолжить тестирование.
	Значительный (S3 – Major)
не работает важная часть одной какой-либо функции/бизнес-логики, но при выполнении специфических условий, либо 
есть workaround, позволяющий продолжить ее тестирование либо не работает не очень значительная 
часть какой-либо функции. Также относится к дефектам с высокими visibility – 
обычно не сильно влияющие на функциональность дефекты дизайна, которые, однако, сразу бросаются в глаза.
	Незначительный (S4 – Minor)
часто ошибки GUI, которые не влияют на функциональность, но портят юзабилити или внешний вид. 
Также незначительные функциональные дефекты, либо которые воспроизводятся на определенном устройстве.
	Тривиальный (S5 – Trivial)
почти всегда дефекты на GUI — опечатки в тексте, несоответствие шрифта и оттенка и т.п., 
либо плохо воспроизводимая ошибка, не касающаяся бизнес-логики, проблема сторонних библиотек 
или сервисов, проблема, не оказывающая никакого влияния на общее качество продукта.
		Срочность (priority) показывает, как быстро дефект должен быть устранён. 
Priority выставляется менеджером, тимлидом или заказчиком
	Градация Приоритета дефекта (Priority):
	P1 Высокий (High)
Критическая для проекта ошибка. Должна быть исправлена как можно быстрее.
	P2 Средний (Medium)
Не критичная для проекта ошибка, однако требует обязательного решения.
	P3 Низкий (Low)
Наличие данной ошибки не является критичным и не требует срочного решения. Может быть исправлена, когда у команды 
появится время на ее устранение.



 

			Требования (requirements specification)
Спецификация требований или просто требования — это полное описание разрабатываемого 
программного обеспечения. 
В требованиях указываются свойства, качества и особенности разрабатываемой программы
Требования — это спецификация (описание) того, что должно быть реализовано.
Требования описывают то, что необходимо реализовать, без детализации технической стороны решения.
	Атрибуты требований:
Корректность — точное описание разрабатываемого функционала.
Проверяемость — формулировка требований таким образом, чтобы можно было выставить 
однозначный вердикт, выполнено все в соответствии с требованиями или нет.
Полнота — в требовании должна содержаться вся необходимая для реализации функциональности информация.
Недвусмысленность — требование должно содержать однозначные формулировки.
Непротиворечивость — требование не должно содержать внутренних противоречий и 
противоречий другим требованиям и документам.
Приоритетность — у каждого требования должен быть приоритет
(количественная оценка степени значимости требования).Этот атрибут позволит грамотно 
управлять ресурсами на проекте.
Атомарность — требование нельзя разбить на отдельные части без потери деталей.
Модифицируемость — в каждое требование можно внести изменение.
Прослеживаемость — каждое требование должно иметь уникальный идентификатор, по которому 
на него можно сослаться.




			Отчёт о тестировании (Test Report)
документ который показывает нам то как прошло наше тестирование в рамках 
определенного временного промежутка
	типы отчетов
финальный
промежуточный(недельный, месячный, дневной, версионный(итерационный), финальный)
	части отчета
состав команды
сроки
описание процессов тестирования
дополнения к тестовым кейсам
процент пройденных кейсов
критичные баги
результаты регрессионного тестирования
планы (только для промежуточных)
	ссылки (шаблоны отчетов)
https://vk.com/@usetalkrostov-otchet-o-testirovanii-reliza
https://www.performance-lab.ru/wp-content/themes/pureengineering/images/sitetesting/test_report_example.pdf





			Оценка трудозатрат в тестировании (эстимация)


