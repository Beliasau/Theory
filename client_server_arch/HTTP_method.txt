методы формирования запросов

Безопасные методы
не меняют состояние сервера, все безопасные методы являются идемпотентными


Идемпотентные методы
единичный и множественные вызовы этого метода, 
с идентичным набором данных, будут иметь тот же результат выполнения 
(без сторонних эффектов)


Кэшируемые методы
это HTTP-ответы, которые могут быть закешированы, то есть сохранены для 
дальнейшего восстановления и использования позже, тем самым снижая число 
запросов к серверу. Не все HTTP-ответы могут быть закешированы.


CRUD — акроним, обозначающий четыре базовые функции, используемые 
при работе с базами данных: создание (англ. create), чтение (read), модификация (update), удаление (delete). 
(в этом случае это GET. POST. PUT. DELETE.)



GET
Метод GET запрашивает представление ресурса. Запросы с использованием этого 
метода могут только извлекать данные.

Запрос имеет тело		Нет
Успешный ответ имеет тело	Да
Безопасный			Да
Идемпотентный			Да
Кешируемый			Да
Допускается в HTML-формах	Да

Синтаксис
GET /index.html



HEAD
запрашивает ресурс так же, как и метод GET, но без тела ответа.
Такой запрос может быть выполнен перед загрузкой большого ресурса, 
например, для экономии пропускной способности.

Запрос имеет тело		Нет
Успешный ответ имеет тело	Нет
Безопасный			Да
Идемпотентный			Да
Кешируемый			Да
Допускается в HTML-формах	Нет

Синтаксис
HEAD /index.html



POST
используется для отправки сущностей к определённому ресурсу. 
Часто вызывает изменение состояния или какие-то побочные эффекты на сервере.

Запрос имеет тело		Да
Успешный ответ имеет тело	Да
Безопасный			Нет
Идемпотентный			Нет
Кешируемый			Только если включена информация о свежести сообщения
Допускается в HTML-формах	Да

Синтаксис
POST /index.html



PUT
заменяет все текущие представления ресурса данными запроса.
Разница между PUT и POST в том, что PUT является идемпотентным,  в случае с POST, 
множественный вызов с идентичным набором данных может повлечь за собой сторонние эффекты.

Запрос имеет тело		Да
Успешный ответ имеет тело	Нет
Безопасный			Нет
Идемпотентный			Да
Кешируемый			Нет
Допускается в HTML-формах	Нет

Синтаксис
PUT /new.html HTTP/1.1



DELETE
удаляет указанный ресурс.

Запрос имеет тело		Может
Успешный ответ имеет тело	Может
Безопасный			Нет
Идемпотентный			Да
Кешируемый			Нет
Допускается в HTML-формах	Нет

Синтаксис
DELETE /file.html HTTP/1.1



CONNECT
устанавливает "туннель" к серверу, определённому по ресурсу.
метод CONNECT может использоваться для доступа к сайту, который использует 
SSL (en-US) (HTTPS). Клиент запрашивает HTTP-прокси-сервер для туннелирования 
TCP-соединения с желаемым назначением. За тем сервер переходит к подключению 
от имени клиента. После того, как соединение установлено сервером, прокси-сервер 
продолжает проксировать поток TCP к клиенту и от него.

Синтаксис
CONNECT www.example.com:443 HTTP/1.1



OPTIONS
используется для описания параметров соединения с ресурсом.
Клиент может указать особый URL для обработки метода OPTIONS, или * (звёздочку) 
чтобы указать весь сервер целиком.

Запрос имеет тело		Нет
Успешный ответ имеет тело	Да
Безопасный			Да
Идемпотентный			Да
Кешируемый			Нет
Допускается в HTML-формах	Нет

Синтаксис
OPTIONS /index.html HTTP/1.1
OPTIONS * HTTP/1.1



TRACE
выполняет вызов возвращаемого тестового сообщения с ресурса.
выполняет проверку обратной связи по пути к целевому ресурсу, предоставляя полезный механизм отладки.
Конечный получатель запроса должен отразить полученное сообщение, исключая 
некоторые поля описанные ниже, назад клиенту как тело сообщения с ответом 200 (OK) 
с заголовком Content-Type message/http. Конечный получатель это либо исходный сервер, 
либо первый сервер получивший значение Max-Forwards в запросе.

Синтаксис
TRACE /index.html



PATCH
используется для частичного изменения ресурса.

