			XML 
(eXtensible Markup Language) — «расширяемый язык разметки»
XML — используется в SOAP (всегда) и REST-запросах (реже)
используется для хранения и передачи информации

вверху XML документа можно увидеть
<?xml version="1.0" encoding="UTF-8"?>
Эта строка называется XML прологом. Она показывает версию XML, который используется 
в документе, а также кодировку. Пролог необязателен, если его нет — это ок. 
Но если он есть, то это должна быть первая строка XML документа.
UTF-8 — кодировка XML документов по умолчанию.


В XML каждый элемент должен быть заключен в теги. 
Тег — это некий текст, обернутый в угловые скобки:
<tag>
Текст внутри угловых скобок — название тега.
Тега всегда два:
Открывающий — текст внутри угловых скобок
<tag>
Закрывающий — тот же текст (это важно!), но добавляется символ «/»
</tag>

В  XML-документе есть корневой элемент. Это тег, 
с которого документ начинается, и которым заканчивается. 

У элемента могут быть атрибуты — один или несколько. Их мы указываем внутри 
отрывающегося тега после названия тега через пробел в виде
название_атрибута = «значение атрибута»
Например:
<query attr1=“value 1”>Виктор Иван</query>
<query attr1=“value 1” attr2=“value 2”>Виктор Иван</query>


XSD 
(XML Schema Definition) — это описание вашего XML. Как он должен выглядеть, 
что в нем должно быть? Это ТЗ, написанное на языке машины — ведь схему мы пишем… 
Тоже в формате XML! Получается XML, который описывает другой XML.
Если мы создаем SOAP-метод, то указываем в схеме:
	какие поля будут в запросе;
	какие поля будут в ответе;
	какие типы данных у каждого поля;
	какие поля обязательны для заполнения, а какие нет;
	есть ли у поля значение по умолчанию, и какое оно;
	есть ли у поля ограничение по длине;
	есть ли у поля другие параметры;
	какая у запроса структура по вложенности элементов
Теперь, когда к нам приходит какой-то запрос, он сперва проверяется на корректность 
по схеме. Если запрос правильный, запускаем метод, отрабатываем бизнес-логику


Разработчик сам решает, какой XML будет считаться правильным, а какой нет. 
Но есть общие правила, которые нельзя нарушать. XML должен быть well formed, 
то есть синтаксически корректный.
Чтобы проверить XML на синтаксис, можно использовать любой XML Validator 
Правила well formed XML:
	Есть корневой элемент.
	У каждого элемента есть закрывающийся тег.
	Теги регистрозависимы!
	Соблюдается правильная вложенность элементов.
	Атрибуты оформлены в кавычках.(<query attr1=“123”>Виктор Иван</query>)



Отличия XML от HTML
HTML — для разметки веб-страниц.
XML — для хранения и передачи информации в удобном для человека и компьютера виде.
основное техническое отличие. Теги HTML являются заранее заданными («predefined»
XML не использует заранее заданные теги. Ты можешь давать тегам любые названия, 
какие захочешь — <header>, <title>, <idontknow2121>.



ПРИМЕР

<?xml version="1.0" encoding="UTF-8"?>
<carstore>
   <car category="truck">
       <model lang="en">Scania R 770</model>
       <year>2005</year>
       <price currency="US dollar">200000.00</price>
   </car>
   <toy:car category="sedan">
       <title lang="en">Ford Focus</title>
       <year>2012</year>
       <price currency="US dollar">100.00</price>
   </toy:car>
</carstore>
  

toy: это префикс

Чтобы использовать префиксы, нам надо зарегистрировать каждый из них в качестве 
пространства имен (namespacе)
Для создания уникальных имен namespace обычно используют URI. Иногда сюда подставляют адрес в Сети, 
где подробно описаны функции предназначение этого пространства имен.
Но это не обязательно должен быть действующий интернет-адрес. Очень часто на проектах 
используют просто URI-подобные строки, которые помогают отследить иерархию пространств имен.

Вот пример:

<?xml version="1.0" encoding="UTF-8"?>
<carstore xmlns:real="http://testproject.developersgroup1.companyname/department2/namespaces/real"
         xmlns:toy="http://testproject.developersgroup1.companyname/department2/namespaces/toy">
<real:car category="truck">
   <model lang="en">Scania R 770</model>
   <year>2005</year>
   <price currency="US dollar">200000.00</price>
</real:car>
<toy:car category="sedan">
   <title lang="en">Ford Focus</title>
   <year>2012</year>
   <price currency="US dollar">100.00</price>
</toy:car>
</carstore>

