			DB (Data Base) база данных
База данных — это упорядоченный набор структурированной информации или данных, 
которые обычно хранятся в электронном виде в компьютерной системе
Стоит различать СУБД и БД

			модели баз данных(самые распостраненные)
Простые структуры данных
	простейший способ хранения данных – текстовые файлы. Метод применяется и сегодня для работы 
	с небольшими объёмами информации. Для разделения полей используется специальный символ: 
	запятая или точка с запятой в csv-файлах датасетов, двоеточие или пробел в *nix-подобных системах:

Иерархическая
каждый объект при таком хранение информации представляется в виде определенной сущности, 
то есть, у этой сущности могут быть дочерние элементы, родительские элементы, а у тех дочерних 
могут быть еще дочерние элементы, но есть один объект, с которого все начинается. 
Получается своеобразное дерево. Примером иерархической базы данных может быть, 
файловая система компьютера,
	информация организована в виде древовидной структуры с отношениями «предок-потомок»;
	каждая запись может иметь не более одного родителя;
	связи между записями выполнены в виде физических указателей;
	невозможно реализовать отношения «многих-ко-многим».

Сетевая
являются своеобразной модификацией иерархических баз данных.
	Сетевые базы данных расширяют функциональность иерархических: записи могут иметь более 
	одного родителя. А значит, можно моделировать сложные отношения.

Реляционная
набор таблиц хранящихся в одном пространстве, связаных между собой
	поле в таблице, называемое внешним ключом, может содержать ссылки на столбцы в других таблицах, 
	что позволяет их соединять;
	высокоорганизованная структура и гибкость делает реляционные БД мощными и адаптируемыми 
	ко различным типам данных;
	для доступа к данным используется язык структурированных запросов (SQL);
	надёжный выбор для многих приложений.


NoSQL – группа типов БД, предлагающих подходы, отличные от стандартного реляционного шаблона. 
Говоря NoSQL, подразумевают либо «не-SQL», либо «не только SQL», чтобы уточнить, 
что иногда допускается SQL-подобный запрос.


Первичный ключ
Обычно таким ключом является ID, идентификатор записи.
отвечает за то, чтобы каждое значение в поле было уникальным, никаких дублей. 
При попытке добавить в таблицу запись с неуникальным первичным ключом получаешь ошибку
его делаюта втоинкрементальным — это значит, что он генерируется сам по алгоритму 
«прошлое значение + 1».

Вторичный ключ (foreign key, внешний ключ.)
не обязателен
используется для связи таблиц между собой в бд

отношения в БД
1 ко многим 
1 ко 1 (каждая запись 1ой таблицы соответствует 1ой записи из другой табл)
многие к 1
многие ко многим









					НОРМАЛИЗАЦИЯ

Нормализация —процесс приведения таблиц к нормальному виду(2 основных нормальных формы 1NF. 2NF)
1NF атомарность	
2NF 
Таблица должна находиться в первой нормальной форме
Таблица должна иметь ключ
Все неключевые столбцы таблицы должны зависеть от полного ключа (в случае если он составной)
Если ключ составной, т.е. состоит из нескольких столбцов, то все остальные неключевые 
столбцы должны зависеть от всего ключа, т.е. от всех столбцов в этом ключе. 
Если какой-то атрибут (столбец) зависит только от одного столбца в ключе, значит, база данных 
не находится во второй нормальной форме.
Иными словами, в таблице не должно быть данных, которые можно получить, зная только половину ключа, 
т.е. только один столбец из составного ключа.
Главное правило второй нормальной формы (2NF) звучит следующим образом
Таблица должна иметь правильный ключ, по которому можно идентифицировать каждую строку.

Нормализация Некоторые из преимуществ:
Лучшая организация базы данных
Больше таблиц с небольшими строками
Эффективный доступ к данным
Большая гибкость для запросов
Быстрый поиск информации
Проще реализовать безопасность данных
Позволяет легко модифицировать
Сокращение избыточных и дублирующихся данных
Более компактная база данных
Обеспечивает согласованность данных после внесения изменений

не всегда нормализация позитивно влияет на производительность БД

ДЕНОРМАЛИЗАЦИЯ
обратный процесс нормализации для уменьшения времени обработки запросов и увеличения производительности
достигается 2мя способами:
1) обьединение таблиц
2) ввод дополнительного поля в одну из таблиц









				Требования ACID

ACID — это аббревиатура из требований, которые обеспечивают сохранность ваших данных:
	Atomicity — Атомарность
	Consistency — Согласованность
	Isolation — Изолированность
	Durability — Надёжность
Если база данных не поддерживает их, то могут быть печальные последствия из серии 
«Деньги с одного счета ушли, на другой не пришли? Ну сорян, бывает».

	свойство ACID в базе данных
Атомарность. Гарантирует, что транзакция будет полностью выполнена или потерпит неудачу, где транзакция представляет одну логическую операцию данных. Это означает, что при сбое одной части любой транзакции происходит сбой всей транзакции и состояние базы данных остается неизменным.

Согласованность. Гарантирует, что данные должны соответствовать всем правилам валидации. Проще говоря, вы можете сказать, что ваша транзакция никогда не оставит вашу базу данных в недопустимом состоянии.

Изолированность. Основной целью изолированности является контроль механизма параллельного изменения данных.

Долговечность. Долговечность подразумевает, что если транзакция была подтверждена (COMMIT), произошедшие в рамках транзакции изменения сохранятся независимо от того, что может встать у них на пути (например, потеря питания, сбой или ошибки любого рода).






					индекс


Индекс — это как алфавитный указатель в библиотеке.
Индексы относятся к методу настройки производительности, позволяющему быстрее извлекать записи из таблицы. Индекс создает отдельную структуру для индексируемого поля и, следовательно, позволяет быстрее получать данные.
при обнавлении данных в большом количестве рекомендуется отключать индексацию, а потом ее заново включать, тк это тормозит процесс обработки данных системой

кластерный индекс
Индекс кластера – это тип индекса, который сортирует строки данных в таблице по их ключевым значениям. В базе данных существует только один кластеризованный индекс на таблицу.
Кластерный индекс определяет порядок, в котором данные хранятся в таблице и могут быть отсортированы только одним способом. Таким образом, для каждой таблицы может быть только один кластеризованный индекс. В РСУБД, как правило, первичный ключ позволяет создавать кластерный индекс на основе этого конкретного столбца.

некластеризованный индекс
Некластеризованный индекс хранит данные в одном месте и индексы в другом месте. Индекс содержит указатели на местоположение этих данных. Одна таблица может иметь много некластеризованных индексов, поскольку индекс в некластеризованном индексе хранится в разных местах.\
Например, книга может иметь более одного индекса, один в начале, который отображает содержание книги, а второй индекс показывает индекс терминов в алфавитном порядке.
Некластеризованный индекс определяется в неупорядоченном поле таблицы. Этот тип метода индексации помогает повысить производительность запросов, использующих ключи, которые не назначены в качестве первичного ключа. Некластеризованный индекс позволяет добавить уникальный ключ для таблицы.







				 подмножества SQL:

DDL - язык определения данных: Определяет структуру данных и имеет такие команды, как CREATE, ALTER, DROP и т. Д.
DML - язык обработки данных: Манипулирует существующими данными и имеет такие команды, как SELECT, UPDATE, INSERT и т. Д.
DCL - Язык управления данными: Управляет доступом к данным в базе данных и имеет такие команды, как GRANT, REVOKE.








				Каскадные операции

Каскадные обновления и каскадные удаления
При изменении значения первичного ключа таблицы связанные данные во внешних ключах, относящихся к этой таблице, также изменяются, отражая изменения в первичном ключе.При удалении записи в таблице, все записи, связанные с этой записью в соответствующих таблицах, автоматически удаляются







				Триггеры

Триггеры в SQL

Триггеры по своей сути представляют обработчики событий. Они выполняются при наступлении какого-либо простого действия в SQL. Такими действиями обычно являются: удаление, вставка и обновление данных
Триггер позволяет автоматизировать некоторые расчетные рутинные действия
Возможно 6 вариантов срабатывания тригеров:
BEFORE INSERT
BEFORE UPDATE
BEFORE DELETE
AFTER INSERT
AFTER UPDATE
AFTER DELETE
ПРИМЕР 
Триггер представляет собой хранимую процедуру, которая активизируется при наступлении определенного события. Например, можно задать хранимую процедуру, которая срабатывает каждый раз при удалении записи из транзакционной таблицы - таким образом, обеспечивается автоматическое удаление соответствующего заказчика из таблицы заказчиков, когда все его транзакции удаляются.

триггер который автоматически будет увеличивать новую введенную цену на 20%.







				ПРЕДСТАВЛЕНИЯ

представления в SQL являются особым объектом, который содержит данные, полученные запросом SELECT из обычных таблиц. Это виртуальная таблица, к которой можно обратиться как к обычным таблицам и получить хранимые данные. Представление в SQL может содержать в себе как данные из одной единственной таблицы, так и из нескольких таблиц.






				Хранимые процедуры 

Хранимые процедуры представляют собой набор команд SQL, которые могут компилироваться и храниться на сервере. Таким образом, вместо того, чтобы хранить часто используемый запрос, клиенты могут ссылаться на соответствующую хранимую процедуру. Это обеспечивает лучшую производительность, поскольку данный запрос должен анализироваться только однажды и уменьшается трафик между сервером и клиентом. Концептуальный уровень можно также повысить за счет создания на сервере библиотеки функций.
Это может быть полезным тогда, когда:
многочисленные приложения клиента написаны в разных языках или работают на других платформах, но нужно использовать ту же базу данных операций
безопасность на 1 месте
Хранимые процедуры и функции (подпрограммы) могут обеспечить лучшую производительность потому, что меньше информации требуется для пересылки между клиентом и сервером. Выбор увеличивает нагрузку на сервер БД, но снижает затраты на стороне клиента. 
В отличие от хранимых функций в хранимые процедуры  СУБД позволяют формировать и выполнять ди-
намические SQL-запросы.
• выполнять динамические запросы и помещать результаты их работы в пере-
менные можно только с использованием т.н. «сессионных переменных» 
(имена которых начинаются со знака @);
• имена переменных, в которые помещается результат выполнения запроса, 
не должны совпадать с именами параметров хранимой процедуры (и, в не-
которых случаях, с именами полей, возвращаемых запросом).







				тип хранения данных MyISAM или InnoDB

InnoDB
Он обеспечивает функцию управления транзакциями. Он гарантирует, что набор команд выполняется успешно или, когда в любой из команд возникает ошибка, результаты всех команд откатываются, что можно представить в электронном банке!был спроектирован для обработки транзакций, в частности для большого количества короткоживущих транзакций, которые чаще комитятся чем откатываются.
MyISAM 
он разработан с учетом того, что количество запросов к базе данных намного больше, чем количество обновлений. Таким образом, ISAM выполняет операции чтения очень быстро и не занимает много памяти и ресурсов хранения. Два основных недостатка ISAM:Он не поддерживает обработку транзакций и не может быть отказоустойчивым.: Если ваш жесткий диск выходит из строя, файлы данных не могут быть восстановлены. 







				ТРАНЗАКЦИИ
Транзакция - логическая единица работы в базе данных а так же единица восстановления информации при сбое СУБД. При фиксации изменений в базе данных гарантируется сохранение либо всех изменений, либо ни одного. Более того, выполняются все правила и проверки, обеспечивающие целостность данных.
Транзакции базы данных обладают свойствами, сокращенно называемыми ACID
Все команды, выполняемые пользователями на сервере, производятся в теле транзакций. Однако существует два подхода к указанию границ транзакций в потоке команд - явные и неявные транзакции.

Явные транзакции. По умолчанию, каждая команда выполняется как отдельная транзакция. Пользователь может объединить несколько команд в одну транзакцию, явно указав ее начало и конец.

Неявные транзакции. Не существует оператора начала транзакции. Транзакция начинается с началом сеанса работы с БД. Завершается транзакция при следующих событиях:
	Явно выполненный оператор завершения транзакции - rollback или commit
	Оператор DDL
	Завершение сеанса.
	После окончания транзакции сразу неявно начинается новая транзакция






