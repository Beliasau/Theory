1. Тестирование. Качество ПО. QA, QC, testing				
2. Валидация vs Верификация				
3. Цели тестирования				
4. Этапы тестирования (STLC)
5. Тест-план.  Тест-стратегия					
6. Тест-дизайн				
7. Техники тест-дизайна				
8. Продвинутые техники тест-дизайна				
9. Бонусные и Авторские Техники тест-дизайна				
10. Exploratory vs Ad-hoc testing				
11. Test Case (Тестовый случай).	тестовый набор (test suite)			
12. Check-list (Чек-лист)				
13. Bug Report (Баг-репорт)				
14. Severity vs Priority				
15. Traceability Matrix (Матрица соответствия требований)	(Матрица троссировки)				
16. Defect / Error / Bug / Failure				
17. Уровни тестирования (Levels of Testing)	(класификация по уровням тестирования)			
18. Виды / Типы тестирования (Testing Types)\(функциональное и нефункциональное)					
19. Принципы тестирования (Principles of Testing)				
20. Статическое и Динамическое тестирование				
21. Требования (Requirements)				
22. Жизненный цикл бага				
23. SDLC/STLC			
24. Методологии (модели) разработки (Scrum, Agile ценности, принципы, манифест)				
25. пользовательская история (User Story)
26. Отчёт о тестировании (test progress report, test summary report)				
27. Оценка трудозатрат в тестировании (эстимация)
28. Метрики. 
29. классификация тестирования по позитивности 
30. классификация	тестирования по степени важности тестируемых функций
31. по степени автоматизации
32. классификация тестирования по знанию кода
33. классификация по цели тестирования
34. классификация по исполнению сценария
35. дополнительные виды классификации тестирования
36. a/b testing
37. Чем отличается системное тестирование от сквозного (E2E - end-to-end testing)?
38. Sanity testing
39.  Когда начинать и заканчивать тестирование?
40.  Перечислите характеристики качества программного обеспечения и их атрибуты.
41. Что такое SRS
42. Риск
43.	Свойства качественных требований

				
===============================================================================================================				
				
1. Тестирование. Качество ПО				
				
QA  (Quality Assurance, обеспечение качества)				
мероприятия на всех этапах разработки				
основная задача- выстроить систему, которая будет работать на качество продукта(предупреждать дефекты)				
тестирование документации				
внедрение методик по улучшению качества				
проактивная работа				
ревью кода на соответствие стандартам				
коммуникационные активности и проч.				
предотвращение ошибок на этапе написания документации				
 				
QC (Quality Control, контроль качества)				
тестирование, но не ограничивается только им. QC обеспечивает соответствие требованиям к продукту				
и соответствия к заранее согласованному уровню качества				
основная задача- представить картину того что происходит с качеством продукта на каждом этапе разработки				
анализ кода				
технические обзоры				
анализ дизайна				
				
TESTING				
тестирование, проверка создаваемого подукта на соответствие требованиям				
Основная задача тестирования – выявить и зафиксировать дефекты.				
реактивная работа (выдали – проверил – описал дефекты – исправили)				
				
Качество ПО				
соответствие ожидаемого результата с действительным		
уровень качества ПО - уровень соответсвия  характеристик выпускаемого ПО, c требованиями заказчика и ожиданиями клиента		
				
Процесс тестирования (test process): Фундаментальный процесс тестирования охватывает планирование тестирования,
анализ и дизайн тестов, внедрение и выполнение тестов, оценку достижения критериев выхода и отчетность,
а также работы по завершению тестирования. (ISTQB)				

Тестирование				
— это одна из техник контроля качества, включающая в себя активности по:				
Test Management (планированию работ)				
Test Design (проектирование тестов)				
Test Execution (выполнение тестов)				
Test Analysis (анализ результатов тестирования)				
				
				
				
				
				
2. Валидация vs Верификация				
				
ВЕРИФИКАЦИЯ				
статическая практика проверки документов дизайна, архитектуры, и тд, проходит без запуска кода				
верификация всегда происходит до валидации				
делаем ли мы продукт правильно? соответствует ли продукт внутренним требованиям (документации)?				
				
ВАЛИДАЦИЯ				
динамический процесс оценки конечного продукта, когда необходимо проверить соответствует ли ПО				
ожиданиям клиента				
всегда после верификации				
делаем ли мы правильный продукт?создается ли продукт правильно с точки зрения ожиданий клиента?				
				
				
Например, лекарство прошло все положенные испытания и поступило в продажу. Значит ли это что оно может				
быть применено каким-то конкретным больным? Нет, т. к. каждый пациент имеет свои особенности и конкретно				
для этого лекарство может быть губительным, т.е. кто–то (врач) должен подтвердить: да, этому больному				
можно принимать это лекарство. То есть врач должен выполнить валидацию: придать законную силу				
конкретному применению.				
				
пример. Предприятие выпускает трубы, предназначенные для закладки в землю, в соответствии с				
некоторыми ТУ (Техническими условиями). Продукция этим ТУ соответствует, но поступил заказ,				
предполагающий укладку труб по дну моря. Могут ли трубы, соответствующие имеющимся ТУ,				
быть применены в данном случае? Именно валидация и дает ответ на этот вопрос.				
				
				
				





3. Цели тестирования				
				
Повысить вероятность того, что приложение:				
будет соответствовать всем описанным требованиям.				
будет работать правильно при любых обстоятельствах.				
Предоставление актуальной информации о состоянии продукта на данный момент.				
				
				






4. Этапы тестирования	(STLC)			
				
Анализ продукта				
Работа с требованиями				
Разработка тест плана				
Создание тестовой документации				
Тестирование				
Отчет о тестировании (test report)				
Стабилизация				
Эксплуатация				
				





				

5. Тест план.  Тест-стратегия				
				
			
"Тест план (Test Plan) — это документ, который описывает весь объем работ по тестированию, начиная с описания 
объекта, стратегии, расписания, критериев начала и окончания тестирования, до необходимого в процессе работы 
оборудования, специальных знаний, а также оценки рисков."				
				
Отвечает на вопросы:				
Что?				
Когда?				
Критерии начала/окончания тестирования.				
Окружение (environment) dev/staging/production?				
Подходы/техники/инструменты/виды тестирования?				
Браузеры/версии/OS/разрешения экрана?				
Кто? Обязанности? Ресурсы? Обучение?				
Сроки?				
График?				
Стратегия тестирования.				
Ссылки на документацию.				
Ссылки на требования.				
				
Основные пункты тест плана:				
				
Идентификатор тест плана (Test plan identifier);				
Введение (Introduction);				
Объект тестирования (Test items);				
Функции, которые будут протестированы (Features to be tested;)				
Функции, которые не будут протестированы (Features not to be tested);				
Тестовые подходы (Approach);				
Критерии прохождения тестирования (Item pass/fail criteria);				
Критерии приостановления и возобновления тестирования (Suspension criteria and resumption requirements);				
Результаты тестирования (Test deliverables);				
Задачи тестирования (Testing tasks);				
Ресурсы системы (Environmental needs);				
Обязанности (Responsibilities);				
Роли и ответственность (Staffing and training needs);				
Расписание (Schedule);				
Оценка рисков (Risks and contingencies);				
Согласования (Approvals).				
				
				
				
тестовая стратегия				
может быть отдельным документом либо же частью тест-плана				
							
кто составляет				
менеджер				
тестировщик(уровня Middle+)				
				
что включает?				
цель тестирования				
(для чего будет использоваться конретный вид тестирования, чтобы добится результата)				
информация о продукте				
виды тестирования				
критерии начала и окончания тестирования				
				
Test strategy. A high-level description of the test levels to be performed and the testing within				
those levels (group of test activities that are organized and managed together, e.g. component test,				
integration test, system test and acceptance test) for an organi￾zation or program (one or more projects)				
[ISTQB Glossary]				
перевод(Стратегия тестирования. Высокоуровневое описание уровней тестирования, которые необходимо выполнить, и тестирования в рамках
этих уровней (группа тестовых действий, которые организованы и управляются совместно, например, тестирование компонентов,
интеграционное тестирование, системное тестирование и приемочное тестирование) для организации или программы (одного или нескольких проектов).	)			










				
6. Тест дизайн 				
				
"Test design — это процесс проектирования и создания тест кейсов, 
в соответствии с критериями качества и целями тестирования."				
Тест аналитик — определяет «ЧТО тестировать?»				
Тест дизайнер — определяет «КАК тестировать?»				
Реальность — все делает 1 человек :)				
				
задачами тест-дизайна являются:				
Анализ требований и рисков тестирования				
Определение проверок для тестирования				
Формализация проверок в виде тестовых сценариев				
Приоритезация проверок				
Определение подходов к тестированию				
				
				
				






7. Техники тест дизайна				
				
Эквивалентное Разделение (Equivalence Partitioning) (тестирование на основе классов эквивалентности)				
"Как пример, у вас есть диапазон допустимых значений от 1.00 до 10.00 долларов, вы должны выбрать одно любое 
верное значение внутри интервала, скажем, 5.00, и любые неверные значения вне интервала, например 0.99 и 11.00."

Тестирование на основе классов эквивалентности — это техника, при которой мы разделяем функционал				
(часто диапазон возможных вводимых значений) на группы эквивалентных по своему влиянию на				
систему значений.				
относится к Black Box testing				
Такое тестирование больше всего подходит для систем, в которых				
большая часть входных данных принимает значения в пределах диапазонов или из наборов данных. 			
Тестирование классов эквивалентности​ - это техника, используемая для уменьшения числа тестовых				
наборов до выполнимого уровня при сохранении приемлемого уровня покрытия тестами.				
Класс эквивалентности представляет собой набор данных, которые либо одинаково обрабатываются модулем,				
либо их обработка выдает одинаковые результаты. При тестировании любое значение данных,				
входящее в класс эквивалентности, аналогично любому иному значению класса				
● от 0 до 15				
● от 16 до 18​				
● от 19 до 55​				
● от 56 до 99​				
				
				
				
Анализ Граничных Значений (Boundary Value Analysis)				
Как пример, у вас есть диапазон допустимых значений от 1.00 до 10.00 долларов.				
Two value (двузначный) BVA: валидные граничные значения 1.00, 10.00, и невалидные значения 0.99 и 10.01.				
Three/Full value (трехзначный) BVA: валидные граничные значения 1.00, 1.01, 10.00, 9.99, и невалидные значения 0.99 и 10.01.				
Техника анализа граничных значений (boundary value testing) —				
это техника проверки поведения продукта на крайних (граничных) значениях входных данных.				
Для использования тестирования граничных значений есть простые шаги.				
1 нужно определить классы эквивалентности.				
2 нужно определить границы каждого класса эквивалентности.				
3 создать тест-кейсы для каждого граничного значения, выбрав одну точку на границе, одну точку чуть ниже границы и одну точку чуть выше границы				
Тестирование граничных значений в равной степени применимо на модульном, интеграционном,				
системном и приемочном уровнях тестирования. Для тестирования граничных значений требуются входные				
значения, которые могут быть разделены на классы и границы, которые могут быть определены на основе				
системных требований				
				
				
				
				
Причина / Следствие (Cause/Effect)				
ввод комбинаций условий (причин), для получения ответа от системы (следствие).				
Например, вы проверяете возможность добавлять клиента:				
Причина: необходимо заполнить поля «Имя», «Адрес», «Номер Телефона» и нажать кнопку «Добавить».				
Следствие: После нажатия на кнопку «Добавить», система добавляет клиента в базу данных и показывает его номер на экране.				
				
				



Предугадывание ошибки (Error Guessing)				
"использование знаний системы и способность к интерпретации спецификации (требований) на предмет того, 
чтобы «предугадать» при каких входных условиях система может выдать ошибку."				
Например, спецификация говорит: «пользователь должен ввести код».				
Тестировщик будет думать: «Что, если я не введу код?», «Что, если я введу неправильный код?»…				
				
				
				
8. Продвинутые техники тест дизайна				
				
Попарное тестирование (Pairwise Testing)				
"Формирование таких наборов тестовых данных, в которых каждое тестируемое значение каждого из проверяемых 
параметров хотя бы единожды сочетается с каждым тестируемым значением всех остальных проверяемых параметров."				
Звучит сложно, но на практике использовать эту технику очень просто и логично.				
Суть техники — мы не проверяем все сочетания всех значений, но проверяем ВСЕ ПАРЫ значений.				
				
Попарное тестирование (pairwise testing)				
используется при большом количестве входящих даных				
например сайт должен работать при помощи:				
○ 8 браузеров				
○ 3 плагина				
○ 6 клиентских операционных систем				
○ 3 сервера				
○ 3 серверных операционных системы				
○ 1296 комбинаций				
это техника формирования наборов тестовых данных из полного набора входных данных в системе,				
которая позволяет существенно сократить количество тест-кейсов.				
Одни из гипотез заключается в том-				
1 Дефекты проявляются чаще при сочетании двух параметров, чем трех  и более.				
2 Каждый конкретный тестовый случай может проверить более одной уникальной пары.	

большинство дефектов являются
либо одиночными (тестируемая функция просто не работает и любой тест на эту функцию найдет дефект),
либо двойными (это пара из функции/модуля, с которыми функция/модуль проваливаются, хотя все
остальные пары выполняются успешно). Попарное тестирование определяет минимальный набор, который
поможет нам проверить все одиночные и попарные дефекты. 

				
Попарное тестирование определяет минимальный набор, который				
поможет нам проверить все одиночные и попарные дефекты				
Использование всех пар для создания тест-кейсов основывается на двух техниках				
1 ортогональных массивах​				
2 алгоритме Allpairs.(генерирует пары непосредственно, не прибегая к таким «внешним»				
устройствам, как ортогональный массив.(http://www.satisfice.com	https://pairwise.teremokgames.com/))			
Ортогональный массив - это двумерный массив, с таким интересным свойством - выберите любые				
два столбца в массиве. В каждой паре столбцов будут встречаться все комбинации значений этих				
столбцов, но и, если любая пара встречается в массиве несколько раз, то все остальные пары будут				
встречаться такое же число раз	


	1   2   3

1	1   1   1
2	1   2   2
3	2   1   2
4	2   2   1
			
Использование ортогональных массивов				
1. Определите переменные​.				
2. Определите количество значений, которое может принимать каждая переменная​.				
3. Определите ортогональный массив, у которого будет столбец для каждой переменной				
(каждый столбец ортогонального массива имеет столько же вариантов значений, сколько имеет				
ваша переменная).				
4. Спроецируйте задачу тестирования на ортогональный массив.​				
5. Постройте тест-кейсы				
существуют определенные  ортогональные массивы (это справочная информация)				
нужно подобрать ближайший, чуть больший, подходящий массив!				
что делать с лишними столбцами и строками в массиве???				
1 лишние столбцы нужно удалить.				
2 в строках- замените лишние клетки на любые допустимые значения для переменной				
				
				
				



				
				
Таблица принятия решений (Decision table)				
Они используются для записи сложных				
бизнес-правил, которые должна реализовывать система. Кроме того, тест-кейсы могут быть созданы				
непосредственно из таблицы решений.
В таблицах решений представлен набор условий, одновременное выполнение которых должно привести к определенному действию/решению.				
техника тестирования, основанная на методе чёрного ящика, которая применяется для систем со сложной				
логикой.Таблицы решений​ являются превосходным инструментом для сбора определенных видов требований				
системы и для документирования внутреннего устройства системы. 
		

пример

			Правило 1 Правило 2 ... Правило p
Условия

Условие-1

Условие-2

...

Условие-m
=======================================================

			        Правило 1 Правило 2 Правило 3 Правило 4
Условия

Состоит в браке?	 Да 	     Да        Нет  	Нет
Хороший студент? 	 Да 	     Нет 	    Да  	Нет

Действия

Скидка ($) 		    60 	          25 	    50 	     0
				
При тестировании для каждого правила создаётся как минимум один тест-кейс. Если состояния этого				
правила бинарные, то должно быть достаточно одного теста для каждого сочетания. С другой стороны,				
если состояние является диапазоном значений, то тестирование должно учитывать и нижнюю, и высшую				
границы диапазона. Таким образом мы объединяем идею тестирования граничных значений с				
тестированием таблиц решений				
Тестирование таблиц решений может использоваться всякий раз, когда система должна реализовывать				
сложные бизнес-правила.				
				
				
				
				
				
				
				
				
				
Диаграмма (граф) состояний-переходов (State Transition diagram)				
диаграмма для описания поведения системы.				
Система имеет конечное число состояний и переходов между состояниями.				
Диаграмма может быть переведена в Таблицу состояний-переходов (или в таблицу принятия решений).				
Тестирование на основе состояний и переходов (State-Transition Testing)				
применяется для фиксирования требований и описания дизайна приложения.				
таблицы и диаграмы состояний и переходов - как способ документирования поведения системы.				
Преимущество таблицы состояний и переходов в том, что в ней перечисляются все возможные комбинации				
состояний и переходов, а не только допустимые.				
Информация в диаграммах состояний и переходов легко может быть использована для создания тестов.				
уровни покрытия:				
1. Набор тестов, в котором все СОСТОЯНИЯ будут посещены как минимум один раз				
(Обычно это низкий уровень тестового покрытия.)				
2. Набор тестов, в котором все СОБЫТИЯ​ выполнятся как минимум один раз				
3. Набор тестов, в котором все ПУТИ​ будут пройдены как минимум один раз. Несмотря на то, что				
этот уровень является наиболее предпочтительным из-за его уровня покрытия, это может				
быть неосуществимо				
4. Набор тестов, в котором все ПЕРЕХОДЫ​ будут осуществлены как минимум один раз. Этот				
уровень				
тестирования обеспечивает хороший уровень покрытия без порождения большого				
количества тестов. Этот уровень, как правило, один из РЕКОМЕНДОВАНЫХ!!!!!!				
				
● Состояние​ (изображается в виде круга) - это состояние, в котором система ожидает возникновения				
одного или нескольких событий				
● Переход​ (изображается в виде стрелки) - это изменение состояния из одного в другое,				
произошедшее благодаря какому-то событию				
● Событие​ (представлено надписью над стрелкой перехода) - что-то, что вызывает изменение				
состояния системы. Обычно это событие во внешнем мире, информация о котором вводится в				
систему через её интерфейс. Некоторые события генерируются внутри системы				
● Действие​  - это операция, которая вызвана изменением состояния.				
				




Use case (пользовательский сценарий)	Сценарий использования (Use Case Testing)(Тестирование вариантов использования)				
Это сценарий взаимодействия пользователя с системой для достижения определенной цели.				
Use case содержит:				
кто использует систему (например роль админ/покупатель/продавец).				
что пользователь хочет сделать.				
цели пользователя.				
шаги, которые выполняет пользователь.				
описание того, как система реагируют на действия пользователя.	

Сценарий использования (Use Case Testing)(Тестирование вариантов использования)				
Use Case описывает сценарий взаимодействия двух и более участников				
(как правило — пользователя и системы).				
Вариант использования​ - это сценарий, который описывает использование системы действующим				
лицом для достижения определенной цели. "Действующим лицом" является пользователь,				
играющий свою роль с уважением к системе, который стремится использовать систему для				
достижения чего-то важного внутри конкретного контекста.				
Сценарий представляет собой последовательность шагов, которые описывают взаимодействия				
между действующим лицом и системой.				
Основное правило				
● это создать как минимум один тест-кейс для основного успешногосценария, и как минимум по одному				
● тест-кейсу для каждого ответвления.				
плюсы использования тест-ия вариантов использования:				
● позволяют выявить функциональные требования системы с точки зрения пользователя				
● Могут быть использованы для активного вовлечения пользователей в процесс сбора требований				
● Предоставляют базис для идентификации ключевых компонентов системы, структур, баз данных и				
связей.				
● Служат основанием для разработки тест-кейсов системы на приемочном уровне.				






Доменный анализ (Domain Analysis Testing)				
				
Domain-тестирование​ - это техника, которая может применяться для определения эффективных и				
действенных тест-кейсов, когда несколько переменных могут или должны тестироваться вместе. Она				
использует и обобщает тестирование классов эквивалентности и граничных значений в n одномерных				
измерениях.				
Domain-тестирование облегчает одновременное тестирование нескольких переменных. Это				
полезно, потому что у нас редко будет достаточно времени на создание тест-кейсов для каждой				
переменной в наших системах. Их просто слишком много. Кроме того, переменные часто				
взаимодействуют. Если значение одной переменной ограничивает допустимые значения другой, то				
некоторые дефекты не могут быть обнаружены путем тестирования их по отдельности.				
				
Доменный анализ — методика разработки тестов, относящаяся к методу черного ящика, использующаяся 
для определения действенных и эффективных тестовых сценариев в случаях, когда множественные параметры 
могут или должны быть протестированы одновременно. — ISTQB

Доменный анализ — техника, которая основана на разбиении диапазона возможных значений переменной 
(или переменных) на поддиапазоны (или, иначе, домены), с последующим выбором одного или нескольких 
значений из каждого домена для тестирования. — из статьи Антона Алексеева «Кто такие тест‑дизайнеры и зачем они нужны»

Доменный анализ — это техника, которая может применяться для определения эффективных и действенных 
тест‑кейсов, когда несколько переменных могут или должны тестироваться вместе — Ли Копланд «A Practitioner's Guide to Software Test Design«

Доменный анализ — техника создания эффективных и результативных тест‑кейсов в случае, 
когда несколько переменных могут или должны быть протестированы одновременно. — 
Святослав Куликов «Тестирование программного обеспечения»				
				
				
				
				
				
9. Бонусные и авторские техники тест дизайна				
				
				
Семи-Исчерпывающее тестирование (Semi-Exhaustive Testing)				
"проверка всех возможных комбинаций входных значений. Как правило, на практике применение техники Exhaustive Testing не 
представляется возможным. (см. принцип тестирования №2 Исчерпывающее тестирование недостижимо (Exhaustive testing is impossible))"				
"Иногда на практике встречаются случаи, когда стандартные техники не дают достаточного уровня уверенности в работоспособности системы.
 Например, в системах связанных с медициной или авиа сферами, иногда стоит применять Semi-Exhaustive Testing."				
"Не забываем про принцип тестирования №6 Тестирование зависит от контекста (Testing is context dependent). 
Думаем головой, когда уместно применение этой техники, а когда нет."				
				
				
Блок-схема (block scheme/diagram)				
Блок-схему можно использовать как технику тест дизайна, составляя тест-кейсы по логике схемы.				
рисуем схему и по ней составляем кейсы				
				
				
Шляпы / роли				
Техника “Шляпы / роли” чем-то схожа с техникой составления тест кейсов по Use Case.				
Принцип: одеваем шляпу определенной роли пользователя и представляем себя в его роли.				
"Пример: “одеваем” шляпу Кастинг Директора и размышляем как новый функционал будет работать для этой роли. 
Представляем, какие могут быть зависимости и особенности системы для Кастинг Директора. Размышляем, какие бизнес 
цели преследует Кастинг директор в нашей системе и как поведение системы может отличаться от других ролей. 
Потом “одеваем” шляпу Актера, Агента, Админа…"				
				
				
Техники тест дизайна, о которых пока нигде не слышал:				
"Каждый имеет право придумать свою технику тест дизайна. 
Тестирование - это не бездумное применение всем известных техник. © Илларион"				
О техниках “Разговорчики-driven”, “Analytics-driven”, “Bug-driven” я пока нигде не слышал.				
"⚠️ Интервьюеры могут быть отличниками, которые ограничиваются только книжными понятиями и не выходят
 за рамки (thinking out of the box). Поэтому будьте аккуратны с озвучиванием этих техник интервьюеру, особенно, 
если у вас проблемы с объяснением и примерами)) Не ограничивайте себя существующими техниками, думайте, фантазируйте."				
				
				
Разговорчики-driven (talks-driven)				
"Собираем в одной комнате/звонке одного или нескольких программистов, менеджеров, клиентов, 
тестировщиков и тд. И начинаем допрос о конкретной функции или всей системе."				
Если фантазия не работает, то задаем Wh-вопросы:				
what, when, where, who, whom, which, whose, why and how - что, когда, где, кто, кому, какой, чей, почему, как				
"Для продвинутых: сначала собираем всех по одному, а потом по несколько человек.
 Не выпускаем, пока не получим все ответы и не решим какие тесты проектировать."				
				
				
Аналитика-driven (analytics-driven)				
"Если на проекте используется аналитика, например при кликах на кнопки или при открытии страниц 
отправляются ивенты (events) в систему для аналитики, то можно использовать данные аналитики для составления тест кейсов."				
"Мы знаем куда пользователи чаще всего кликают, на каких страницах проводят больше всего времени. 
Почему бы основываясь на этих данных не составить тест кейсы?"				
				
				
Баг-driven (bugs-driven)				
"Принцип тестирования №4 Скопление дефектов (Defects clustering) гласит, что 
“большая часть дефектов содержится в небольшом количестве модулей”."				
"Основываясь на найденных ранее багах и на обращениях клиентов в службу поддержки,
 можно определить “больные” места системы и сконцентрировать тест кейсы на этих модулях системы."				
Дополнительно можно посидеть над найденными багами и подумать “а может ли аналогичный баг быть в другой части системы?”.				
				
				
				









10. Exploratory vs Ad-hoc testing				
				
				
Исследовательское тестирование (exploratory testing)				
это одновременное изучение системы, проектирование тестов (тест дизайн) и непосредственно тестирование.				
Данная техника базируется на опыте тестировщика (experience based).				
Пример: приходит тестировщик на новый проект и начинает одновременно изучать сайт, писать чек-лист и проходить этот чек-лист (тестировать).				
				
исследовательское(на основе чек листов)(exploratory testing) — частично формализованный подход,				
в рамках которого тестировщик выполняет работу с приложением по выбранному сценарию, который,				
в свою очередь, дорабатывается в процессе выполнения с целью более полного исследования приложения.				
Ключевым фактором успеха при выполнении исследовательского тестирования является именно работа по				
сценарию, а не выполнение разрозненных бездумных операций. Существует даже специальный сценарный подход,				
называемый сессионным тестированием (session-based test￾ing). В качестве альтернативы сценариям при				
выборе действий с приложением иногда могут использоваться чек-листы, и тогда этот вид тестирования				
называют тестированием на основе чек-листов (checklist-based testing)				
Exploratory testing. An informal test design technique where the tester actively controls the design of the tests as those tests				
are performed and uses information gained while testing to design new and better tests.				
[ISTQB Glossary]				
Session-based Testing. An approach to testing in which test activities are planned as uninterrupted				
sessions of test design and execution, often used in conjunction with exploratory testing.				
[ISTQB Glossary]				
Checklist-based Testing. An experience-based test design technique whereby the experienced tester				
uses a high-level list of items to be noted, checked, or remembered, or a set of rules or criteria				
against which a product has to be verified.				
[ISTQB Glossary]				
				
				
				
Ad-hoc тестирование				
Перевод от автора статьи - “тестирование от балды”.				
Вид тестирования, который выполняется без подготовки к тестам, без определения ожидаемых результатов, без проектирования тестовых сценариев.				
Неформальное, импровизационное тестирование.				
				
интуитивное (ad hoc testing) — полностью неформализованный подход, в котором не предполагается				
использования ни тест-кейсов, ни чек-листов, ни сценариев — тестировщик полностью опирается на свой				
профессионализм и интуицию (experience-based testing) для спонтанного выполнения с приложением действий,				
которые, как он считает, могут обнаружить ошибку. Этот вид тестирования используется редко и				
исключительно как дополнение к полностью или частично формализованному тестированию в случаях,				
когда для исследования некоторого аспекта поведения приложения (пока?) нет тест-кейсов				
Ad hoc testing. Testing carried out informally; no formal test preparation takes place, no recognized				
test design technique is used, there are no expectations for results and arbitrariness guides the				
test execution activity. [ISTQB Glossary]				
				
				
				
				




11. Test Case (тестовый случай).	тестовый набор (test suite)		 				
				
				
Test Case				
				
— это тестовый артефакт/документ, описывающий совокупность шагов, конкретных условий и параметров, необходимых для проверки тестируемой функции.				
— это описание проверки работы системы, которое может выполнить любой человек из команды.				
— это описание проверки системы на соответствие требованиям.				
				
Тест кейс состоит из:				
ID (идентификатор)				
Title (название)				
Type (тип)				
Priority (приоритет)				
Preconditions (предусловия)				
Steps (шаги)				
Expected Result (ожидаемый результат)				
Post conditions (пост условия) - например очистка данных или возвращение системы в первоначальное состояние.				
Тест кейсы разделяются на позитивные и негативные:				
Позитивный тест кейс использует только корректные данные и проверяет, что приложение правильно выполнило вызываемую функцию.				
Негативный тест кейс оперирует как корректными, так и некорректными данными (минимум 1 некорректный параметр) и ставит целью проверку исключительных ситуаций (срабатывание валидаторов), а также проверяет, что вызываемая системой функция не выполняется при срабатывании валидатора.				
				
Тест-кейс — это последовательность шагов, которые приводят к какому-то результату.				
пошаговый сценарий, в котором описываем как мы будем тестировать

тестовые кейсы могут собираться в тестовые наборы(test suite)				
тест кейс используется на более сложных проектах, где нужна детализация,				
и на более долгих проектах, если велика вероятность прихода новых специалистов, если часто меняется				
команда, с течением времени, на проекте также исп. тест кейс				
тест кейсы очень сложно поддерживать, по этому их используют на проектах где требования				
не меняются часто				
				

			тестовый набор (test suite)
набор тесткейсов, в котором выполнение тесткейса может быть предусловием для выполнения следующего.
кейсы идут друг за другом по порядку



				
				
				
12. Check-list (Чек-лист)				
				
				
Check list				
				
— это документ, описывающий, что должно быть протестировано.				
Чек-лист может быть абсолютно разного уровня детализации.				
Как правило, чек-лист содержит только действия (шаги) без ожидаемого результата.				
Чек-лист менее формализован чем тест кейс.				
Чек-лист намного легче поддерживать, чем тест кейсы.				
Пункты чек листа отвечают на вопрос “что тестировать?”, а конкретные шаги и детали “как тестировать?” описывают в тест кейсах.				

АТРИБУТЫ ЧЕК-ЛИСТА				
версия сборки (билда)				
окружение на котором проводилось тестирование				
дата проведения теста				
тестировщик который проводил тестирование				
тип тестов				
названия тестов				
результат тестов				
может содержаться уникальный ID теста				
чек-лист используется на не сложных проектах и не продолжительных по времени				
				
				
				






				
				
13. Bug report (баг репорт) 				
				
				
Bug Report				
"— это документ, описывающий последовательность действий, которые привели к 
некорректной работе системы, с указанием причин и ожидаемого результата."				
Дефект (bug) — отклонение фактического результата от ожидаемого.				
Отчёт о дефекте (bug report) — документ, который содержит отчет о любом недостатке в				
компоненте или системе, который потенциально может привести компонент или систему к				
невозможности выполнить требуемую функцию.				
					
Основные составляющие Bug report:				
ID (идентификатор)				
Название (Title)				
Короткое описание (Summary)				
Проект (Project)				
Компонент приложения (Component)				
Номер версии (Version)				
Серьезность (Severity)				
Приоритет (Priority)				
Статус (Status)				
Автор (Author)				
Назначен на (Assignee)				
Окружение (Environment: dev/test/staging/prod/etc.)				
App/build version (версия билда/приложения)				
Шаги воспроизведения (Steps to Reproduce)				
Фактический Результат (Actual Result)				
Ожидаемый результат (Expected Result)
Вложения (Attachments) — скриншоты, видео или лог-файлы.				
				
Дополнительные составляющие Bug report:				
Screenshots (скриншоты)				
Video (видео)				
Credentials (login + password)				
Browser console errors (логи с браузера)				
Mobile app logs (логи с мобилки)				
Server logs (логи с сервера)				
API Requests (апи запросы)				
Analytics events (ивенты с аналитики)				
Database data (данные из базы данных)				
Database queries (запросы в базу)				
Date and time (дата и время)				
Comments/Notes (комментарии/заметки)				
Link tasks/bugs (подвязка других задач/багов к текущему)				
HAR archive - архив со всеми запросами в Network				
				
		
				
				










				
14. Severity vs Priority				
				
				
"Серьезность (Severity)
— это атрибут, характеризующий влияние дефекта на работоспособность приложения.

В теории Severity выставляется тестировщиком.
Градация Severity:
S1 Блокирующая (Blocker)
S2 Критическая (Critical)
S3 Значительная (Major)
S4 Незначительная (Minor)
S5 Тривиальная (Trivial)

Приоритет (Priority)
— это атрибут, указывающий на очередность выполнения задачи или устранения дефекта.
Чем выше приоритет, тем быстрее нужно исправить дефект.
В теории Priority выставляется менеджером, тимлидом или заказчиком.
Градация Priority:
P1 Высокий (High)
P2 Средний (Medium)
P3 Низкий (Low)
Реальность: на разных проектах разные градации.
"				
				
				









				
15. Traceability matrix (Матрица соответствия требований)				
				
Traceability matrix - это двумерная таблица, содержащая соответствие функциональных требований и тест кейсов.				
В заголовках колонок таблицы расположены требования, а в заголовках строк — ID тест кейсов.				
На пересечении — отметка, означающая, что требование текущей колонки покрыто тестовым сценарием текущей строки.				
				
На пересечении соответствующих строки и столбца ставится отметка, обозначающая, что данное требование покрывается данным тест-кейсом.
Таким образом, таблица дает визуальное отображение двух параметров:
	•наличие в системе требований, которые еще не покрыты (если у требования нет ни одного 		пересечения с тест-кейсами (достаточное условие);
	•есть ли в системе избыточное тестирование — если требования имеет несколько пересечений 		(необходимое условие).

чаще используется расширенная матрица троссировки, где в шапке таблицы указывается:
	Epic ID
	Feature ID
	User Story ID
	User Story Name
	Test Case Prority
	Test Case ID
	Test Case Name
	Test Case Status
	Smoke\Regres
	Estimation(hours)
	Autotest
	Iteration
	Notes
на основании ее можно выбирать определенные метрики












				
16. Defect / Error / Bug / Failure 				
				
				
Дефект (он же баг)				
— это несоответствие фактического результата ожидаемому результату, описанному в требованиях.				
				
Bug (defect)				
— ошибка программиста (или другого члена команды), то есть когда в программе что-то идёт не так как планировалось и программа выходит из-под контроля.				
Например, когда никак не контролируется ввод пользователя, в результате неверные данные вызывают краши (crash) или иные «приколы» в работе программы. Либо программа построена так, что изначально не соответствует тому, что от неё ожидается.				
				
Error (ошибка)				
— действие, которое привело к неправильному результату.				
Пример 1 — ввод букв в поля, где требуется вводить цифры (возраст, количество товара и т.п.). Error: “поле должно содержать только цифры”.				
Пример 2 - регистрация с уже существующим в системе емейлом. Error: “этот емейл уже используется”.				
				
Failure				
— сбой (причём необязательно аппаратный) в работе компонента, всей программы или системы.				
То есть, существуют такие дефекты, которые приводят к сбоям. И существуют такие, которые не приводят. UI-дефекты например. Но аппаратный сбой, никак не связанный с software, тоже является failure.				
				
				





				
17. Уровни Тестирования (Levels of testing)\(класификация по уровням тестирования)				
				
				
1. Модульное тестирование (Unit Testing)				
Тестирование кода классов, функций, модулей в коде. Обычно выполняется программистами.				
компонентное(модульное)(unit) (unit testing, module testing, com￾ponent testing) направлено на 
проверку отдельных небольших частей приложения, которые (как правило) можно исследовать 
изолированно от других подобных частей. 
Module testing, Unit testing, Component testing. The testing of individual software components. 
[ISTQB Glossary]


2. Интеграционное тестирование (Integration Testing)				
Тестирование взаимодействия между несколькими классами, функциями, модулями. Например тестирование API через Postman.				
интеграционное  (integration testing, component integration testing, pairwise integration testing, 
system integration testing, incremental testing, interface testing, thread testing) 
направлено на проверку взаимодействия между несколькими частями приложения 
(каждая из которых, в свою очередь, проверена отдельно на стадии модульного тестирования)
Integration testing. Testing performed to expose defects in the interfaces and in the interactions 
between integrated components or systems. [ISTQB Glossary]
	компонентное интеграционное тестирование
	системное интеграционное тестирование (API,CLI,GUI)(Тестирование интерфейса) 
	(interface testing) — тестирование, направленное на проверку интерфейсов приложения или 
	его компонентов. По опреде-лению ISTQB-глоссария этот вид тестирования относится к интеграционному 
	тестированию, и это вполне справедливо для таких его вариаций как (API testing) и 
	(CLI testing), и тестирование непосредственно интерфейса пользователя (GUI testing)
	Interface Testing. An integration test type that is concerned with testing the interfaces 
	between components or systems. [ISTQB Glossary]
	API testing. Testing performed by submitting commands to the software under test using 
	programming interfaces of the applica￾tion directly. [ISTQB Glossary]
	CLI testing. Testing performed by submitting commands to the software under test using 
	a dedicated command-line interface.[ISTQB Glossary]
	GUI testing. Testing performed by interacting with the software under test via the graphical 
	user interface. [ISTQB Glossary]

				
3. Системное тестирование (System Testing)				
Проверка как функциональных, так и нефункциональных требований к системе.				

системное  (system testing) направлено на проверку всего приложения как единого целого, 
собранного из частей, проверенных на двух предыдущих стадиях. Здесь не только выявляются дефекты 
«на стыках» компонентов, но и появляется возможность полноценно взаимодействовать с приложением с 
точки зрения конечного пользователя, применяя множество других видов тестирования
System testing. The process of testing an integrated system to verify that it meets specified 
requirements. [ISTQB Glossary]



4. Приемочное тестирование (Acceptance Testing)				
Проверка соответствия системы требованиям и проводится с целью:				
определения удовлетворяет ли система приемочным критериям;				
вынесения решения заказчиком/менеджером принимается приложение или нет.				
приемочное
Приёмочное тестирование (User Acceptance Testing (UAT))(acceptance testing) — формализованное 
тестирование, направленное на проверку приложения с точки зрения конечного пользователя/заказчика и 
вынесения решения о том, принимает ли заказчик работу у исполнителя (проектной команды)
Acceptance Testing. Formal testing with respect to user needs, requirements, and business processes 
conducted to determine whether or not a system satisfies the acceptance criteria and to enable the user,
customers or other authorized entity to determine whether or not to accept the system. 
[ISTQB Glossary]

	пользовательское приемочное тестирование

	эксплуатационное

	на соответствие контракту


	Операционное приёмочное тестирование (operational acceptancetesting, production acceptance 
	testing) — операционное тестирование, выполняемое с точки зрения выполнения инсталляции, 
	потребления приложением ресурсов, совместимости с программной и аппаратной платформой и т.д.
	Operational acceptance testing, Production acceptance testing. Operational testing in the 
	acceptance test phase, typically performed in a (simulated) operational environment by 
	operations and/or systems administration staff focusing on operational aspects, e.g. 
	recoverability, resource-behavior, installability and technical compliance. 
	[ISTQB Glossary]

	Производственное приёмочное тестирование (factory acceptance testing) — выполняемое проектной 
	командой исследование полноты и качества реализации приложения с точки зрения его готовности 
	к передаче заказчику. Этот вид тестирования часто рассматривается как синоним альфа-тестирования
	Factory acceptance testing. Acceptance testing conducted at the site at which the product is 
	developed and performed by employees of the supplier organization, to determine whether or not 
	a component or system satisfies the requirements, normally including hardware as well as 
	software. [ISTQB Glossary]

	Итоговое приёмочное тестирование (site acceptance testing) — тестирование конечными 
	пользователями (представителями заказчика) приложения в реальных условиях эксплуатации с целью 
	вынесения решения о том, требует ли приложение доработок или может быть принято в эксплуатацию 
	в текущем виде.
	Site acceptance testing. Acceptance testing by users/customers at their site, to determine 
	whether or not a component or system satisfies the user/customer needs and fits within 
	the business processes, normally including hardware as well as software. 
	[ISTQB Glossary]

	Альфа-тестирование (alpha testing) выполняется внутри организации-разработчика 
	с возможным частичным привлечением конечных пользователей. Может являться формой внутреннего 
	приёмочного тестирования. Суть  вкратце: продукт уже можно периодически показывать внешним 
	пользователям, но он ещё достаточно «сырой», потому основное тестирование выполняется 
	организацией-разработчиком.
	 Alpha testing. Simulated or actual operational testing by potential users/customers or an 
	independent test team at the developers’site, but outside the development organization. 
	Alpha testing is often employed for off-the-shelf software as a form of internal acceptance 
	testing. [ISTQB Glossary]

	Бета-тестирование (beta testing) выполняется вне организации-разработчика с активным 
	привлечением конечных пользователей/заказчиков. Может являться формой внешнего приёмочного 
	тестирования. Суть вкратце: продукт уже можно открыто показывать внешним пользователям, он 
	уже достаточно стабилен, но проблемы всё ещё могут быть, и для их выявления нужна обратная 
	связь от реальных пользователей.
	Beta testing. Operational testing by potential and/or existing users/customers at an external 
	site not otherwise involved with the developers, to determine whether or not a component or 
	system satisfies the user/customer needs and fits within the business processes. 
	Beta testing is often employed as a form of external acceptance testing for off-the-shelf 
	software in order to acquire feedback from the market. [ISTQB Glossary]

	Гамма-тестирование (gamma testing) — финальная стадия тестирования перед выпуском продукта, 
	направленная на исправление незначительных дефектов, обнаруженных в бета-тестировании. 
	Как правило, также выполняется с максимальным привлечением конечных пользователей/заказчиков. 
	Может являться формой внешнего приёмочного тестирования. Суть вкратце: продукт уже почти готов, 
	и сейчас обратная связь от реальных пользователей используется для устранения 
	последних недоработок				
				













				
18. Виды / типы тестирования (Testing types)\(функциональное и нефункциональное)			
				
1. Функциональное тестирование проверяет, соответствует ли система её функциональным требованиям. Тестирование проводится на основе анализа спецификации функций, которые должна выполнять система. Примером может служить проверка того, правильно ли веб-форма отправляет данные после их заполнения.

2. Нефункциональное тестирование направлено на проверку всех аспектов программного продукта, которые не связаны с конкретными функциями, например, производительность, удобство использования, безопасность. Например, тестирование производительности может включать в себя проверку времени отклика системы при работе с большим объёмом данных.

3. Регрессионное тестирование проводится после изменений в системе (например, после обновлений или исправлений) для убеждения в том, что эти изменения не привели к появлению новых ошибок в уже проверенных частях программы. Это может быть автоматизированный набор тестов, который запускается каждый раз при изменении кода.

4. Интеграционное тестирование направлено на проверку взаимодействия между различными модулями или компонентами системы. Целью является обнаружение дефектов в интерфейсах и взаимодействиях между интегрируемыми компонентами.

5. Системное тестирование охватывает проверку комплексной системы в целом. Этот тип тестирования проверяет, что система соответствует всем заданным требованиям, включая функциональные и нефункциональные.

6. Приёмочное тестирование проводится для определения, готов ли продукт к эксплуатации. Зачастую оно включает в себя выполнение базовых задач пользователями для подтверждения, что система делает то, что от неё ожидают в реальных условиях.

7. Юзабилити тестирование (тестирование удобства использования) фокусируется на том, насколько легко пользователю взаимодействовать с приложением или веб-сайтом. Основное внимание уделяется интуитивности интерфейса и общему пользовательскому опыту.

8. Тестирование безопасности направлено на выявление уязвимостей в программном обеспечении, которые могут быть использованы для нанесения вреда или несанкционированного доступа.

9. Тестирование совместимости проверяет, как программное обеспечение работает в различных средах: на разных операционных системах, браузерах, сетевых средах		
				





18.1. Функциональные виды тестирования				
Функциональное тестирование (Functional testing)				
Тестирование пользовательского интерфейса (GUI Testing)				
Тестирование безопасности (Security and Access Control Testing)				
Тестирование взаимодействия (Interoperability Testing)	

Функциональное
Функциональное тестирование (functional testing) — вид тестирования, направленный на проверку 
корректности работы функциональности приложения (корректность реализации функциональных требований). 
Часто функциональное тестирование ассоциируют с тестированием по методу чёрного ящика, однако и по 
методу белого ящика вполне можно проверять корректность реализации функциональности
функциональное тестирование направлено на проверку того, какие функции приложения реализованы, 
и что они работают верным образом
Functional testing. Testing based on an analysis of the specification of the functionality of a 
component or system. [ISTQB Glossary]





			ВАЖНО!!

ФУНКЦИОНАЛЬНОЕ ТЕСТИРОВАНИЕ, В ОСНОВНОМ ЭТО ТЕСТИРОВАНИЕ ФУНКЦИЙ ПРОГРАММЫ(ФУНКЦИЙ КОДА), Т.Е
ТЕСТИРОВАНИЕ ТОГО ЧТО НАПИСАЛ ПРОГРАММИСТ .
Т.О К ФУНКЦИОНАЛЬНОМУ ТЕСТИРОВАНИЮ МОЖНО ОТНЕСТИ И БОЛЬШИНСТВО НЕФУНКЦИОНАЛЬНОГО ТЕСТИРОВАНИЯ!!!
НА ПРАКТИКЕ ЭТО ЗАВИСИТ ОТ ПРОЕКТА И КОМАНДЫ В КОТРОЙ РАБОТАЕШЬ!
НАПРИМЕР:
В ОДНОЙ ФИРМЕ ФУНКЦИОНАЛЬНОЕ ТЕСТИРОВАНИЕ - ТЕСТИРОВАНИЕ ФРОНТА
НЕФУНКЦИОНАЛЬНОЕ Т-ИЕ - ТЕСТИРОВАНИЕ БЭКЕНДА

ТЕСТИРОВАНИЕ ВОСТАНОВЛЕНИЯ. ВОССТАНОВЛЕНИЕ ПРОПИСАНО ПРОГРАМНО РАЗРАБОТЧИКАМИ, 
ЗНАЧИТ ЭТО ТЕСТИРОВАНИЕ МОЖНО ОТНЕСТИ К ФУНКЦИОНАЛЬНОМУ, А ВОТ ВРЕМЯ ЗА КОТОРОЕ ВОССТАНОВИЛОСЬ ПО,
И УДОВЛЕТВОРЯЕТ ЛИ ЭТО ВРЕМЯ КОНЕЧНОГО ПОЛЬЗОВАТЕЛЯ УЖЕ МОЖНО ОТНЕСТИ К НЕФУНКЦИОНАЛЬНОМУ

ТЕСТИРОВАНИЕ ЛОКАЛИЗАЦИИ. ЛОКАЛИЗАЦИЯ ПРОПИСАНА ПРОГРАМНО (СКРИПТ ПОДТЯГИВАЕТ НУЖНЫЕ СЛОВА ПРИ 
ВЫБОРЕ ДРУГОГО ЯЗЫКА ИЗ БД)- В ЭТОМ СЛУЧАЕ ЭТО ФУНКЦИОНАЛЬНОЕ ТЕСТИРОВАНИЕ, А ВОТ ПРАВИЛЬНОСТЬ ПЕРЕВОДА
И ОРФОГРФИЧЕСКИЕ ОШИБКИ ЭТО УЖЕ НЕФУНКЦИОНАЛЬНОЕ ТЕСТИРОВАНИЕ
				






18.2. Нефункциональные виды тестирования				

Все виды тестирования производительности (Performance):	
Нагрузочное тестирование (Load Testing) много пользователей.	
Стрессовое тестирование (Stress Testing)
Объемное тестирование (Volume Testing) много данных.	
Тестирование восстановления (Recovery Testing)
Тестирование отказоустойчивости (Failover Testing)
Тестирование эффективности (Efficiency Testing)
Тестирование аварийного восстановления (Disaster Recovery Testing)
Тестирование установки (Installation Testing)
Тестирование документации (Documentation Testing)
Тестирование на удобство использования (Usability Testing)
Тестирование графического интерфейса пользователя (User Interface Testing)
Тестирование совместимости (Compatibility Testing)
Тестирование обслуживаемости (Maintainability Testing)
Тестирование безопасности (Security Testing)
Тестирование масштабируемости (Scalability Testing)
Тестирование выносливости (Endurance Testing)
Тестирование надежности (Reliability Testing)
Тестирование соответствия (Compliance Testing)
Тестирование локализации (Localization Testing)
Тестирование интернационализации (Internationalization Testing)
Тестирование переносимости (Portability Testing)
Тестирование на основе базового уровня (Baseline Testing)
Конфигурационное тестирование (Configuration Testing)	
				
			
				
		НЕ Функциональное
Нефункциональное тестирование (non-functional testing) — вид тестирования, направленный на проверку 
нефункциональных особенностей приложения (корректность реализации нефункциональных требований), таких 
как удобство использования, совместимость, производительность, безопасность и т.д
Non-functional testing. Testing the attributes of a component or system that do not relate to functionality, e.g. reliability, efficiency, 
usability, maintainability and portability. [ISTQB Glossary]

тестирование удобства использования (usability testing) — тестирование, направленное на исследование 
того, насколько конечному пользователю понятно, как работать с продуктом (understandability, 
learnability, op￾erability), а также на то, насколько ему нравится использовать продукт(attractiveness). 
Usability. The capability of the software to be understood, learned, used and attractive to the user 
when used under specified conditions. 
[ISTQB Glossary]
Understandability. The capability of the software product to enable the user to understand whether 
the software is suitable, and how it can be used for particular tasks and conditions of use. 
[ISTQB Glossary]
Learnability. The capability of the software product to enable the user to learn its application. 
[ISTQB Glossary]
Operability. The capability of the software product to enable the user to operate and control it. 
[ISTQB Glossary]
Attractiveness. The capability of the software product to be attractive to the user. 
[ISTQB Glossary]

тестирование безопасности (security testing) — тестирование, направленное на проверку способности 
приложения противостоять злонамеренным попыткам получения доступа к данным или функциям, 
права на доступ к которым у злоумышленника нет
Security testing. Testing to determine the security of the software product. 
[ISTQB Glossary]

тестирование установки (Инсталляционное тестирование) (installation testing, installability testing) —
тестирование, направленное на выявление дефектов, влияющих на протекание стадии инсталляции (установки) 
приложения. В общем случае такое тестирование проверяет множество сценариев и аспектов работы инсталля-
тора в таких ситуациях, как:
  новая среда исполнения, в которой приложение ранее не было инсталлировано;
  обновление существующей версии («апгрейд»);
  изменение текущей версии на более старую («даунгрейд»);
  повторная установка приложения с целью устранения возникших проблем («переинсталляция»);
  повторный запуск инсталляции после ошибки, приведшей к невозможности продолжения инсталляции;
  удаление приложения;
  установка нового приложения из семейства приложений;
  автоматическая инсталляция без участия пользователя.
Installability testing. The process of testing the installability of a software product. Installability
is the capability of the software product to be installed in a specified environment. 
[ISTQB Glossary]

тестирование доступности (accessibility testing) — тестирование, направленное на исследование 
пригодности продукта к использованию людьми с ограниченными возможностями (слабым зрением и т.д.).
Accessibility testing. Testing to determine the ease by which users with disabilities can use a 
component or system. [ISTQB Glossary]

Тестирование интернационализации (internationalization testing, i18n test￾ing, globalization testing, 
localizability testing) — тестирование, направленное на проверку готовности продукта к работе 
с использованием различных языков и с учётом различных национальных и культурных особенностей.
Этот вид тестирования не подразумевает проверки качества соответствующей адаптации 
(этим занимается тестирование локализации, см. следующий пункт), оно сфокусировано именно на проверке 
возможности такой адаптации (например: что будет, если открыть файл с иероглифом в имени; как бу-
дет работать интерфейс, если всё перевести на японский; может ли приложение искать данные в тексте 
на корейском и т.д.)

тестирование локализации (localization testing, l10n) — тестирование, направленное на проверку 
корректности и качества адаптации продукта к использованию на том или ином языке с учётом национальных 
и культурных особенностей. Это тестирование следует за тестированием интернационализации 
(см. предыдущий пункт) и проверяет корректность перевода и адаптации продукта, 
а не готовность продукта к таким действиям.

тестирование данных и баз данных(data quality testing (database integ￾rity testing) 
— два близких по смыслу вида тестирования, направленных на исследование таких характеристик данных, 
как полнота, непротиворечивость, целостность, структурированность и т.д. В контексте баз 
данных исследованию может подвергаться адекватность модели предметной области, 
способность модели обеспечивать целостность и консистентность данных, корректность работы триггеров, 
хранимых процедур и т.д
Data quality. An attribute of data that indicates correctness with respect to some pre-defined 
criteria, e.g., business expectations, requirements on data integrity, data consistency. 
[ISTQB Glossary]
Database integrity testing. Testing the methods and processes used to access and manage the data(base), 
to ensure access methods, processes and data rules function as expected and that during access to the 
database, data is not corrupted or unex￾pectedly deleted, updated or created. 
[ISTQB Glossary]

тестирование отказоустойчивости (failover testing) — тестирование, заключающееся в эмуляции или 
реальном создании критических ситуаций с целью проверки способности приложения задействовать 
соответствующие механизмы, предотвращающие нарушение работоспособности, производительности и 
повреждения данных
Failover Testing. Testing by simulating failure modes or actually causing failures in a controlled 
environment. Following a failure, the failover mechanism is tested to ensure that data is not lost 
or corrupted and that any agreed service levels are maintained (e.g., function availability or 
response times). [ISTQB Glossary]

тестирование восстанавливаемости и (recoverability testing) — тестирование способности приложения 
восстанавливать свои функции и заданный уровень производительности, а также восстанавливать данные 
в случае возникновения критической ситуации, приводящей к временной (частичной) утрате работоспособности приложения.
Recoverability Testing. The process of testing to determine the recoverability of a software product 
(the capability of the software product to re-establish a specified level of performance and recover 
the data directly affected in case of failure). [ISTQB Glossary]	

Тестирование надёжности (reliability testing) — тестирование способности приложения выполнять 
свои функции в заданных условиях на протяжении заданного времени или заданного количества операций.

тестирование использования ресурсов (resource utilization testing, effi￾ciency testing, storage testing) 
— совокупность видов тестирования, проверяющих эффективность использования приложением доступных 
ему ресурсов и зависимость результатов работы приложения от количества доступных ему ресурсов. 
Часто эти виды тестирования прямо или косвенно примыкают к техникам тестирования производительности
Resource utilization testing, Storage testing. The process of testing to determine the 
resource-utilization of a software product. 
[ISTQB Glossary]
Efficiency testing. The process of testing to determine the efficiency of a software product 
(the capability of a process to produce the intended outcome, relative to the amount of resources used).
[ISTQB Glossary]

тестирование производительности (performance testing) — исследование показателей скорости реакции 
приложения на внешние воздействия при различной по характеру и интенсивности нагрузке.
Performance Testing. The process of testing to determine the performance of a software product. 
[ISTQB Glossary]
В рамках тестирования производительности выделяют следующие подвиды
	нагрузочное (load testing, capacity testing) — исследование способности приложения сохранять 
	заданные показатели качества при нагрузке в допустимых пределах и некотором превышении 
	этих пределов (определение «запаса прочности»)
	Load Testing. A type of performance testing conducted to evaluate the behavior of a component 
	or system with increasing load, e.g. numbers of parallel users and/or numbers of transactions, 
	to determine what load can be handled by the component or system. [ISTQB Glossary]

	масштабируемости (scalability testing) — исследование способности приложения увеличивать 
	показатели производительности в соответствии с увеличением количества доступных приложению 
	ресурсов
	Scalability Testing. Testing to determine the scalability of the software product 
	(the capability of the software product to be upgraded to accommodate increased loads). 
	[ISTQB Glossary]

	стресс тестирование (stress testing) — исследование поведения приложения при нештатных 
	изменениях нагрузки, значительно превышающих расчётный уровень, или в ситуациях недоступности 
	значительной части необходимых приложению ресурсов. Стрессовое тестирование может выполняться 
	и вне контекста нагрузочного тестирования: тогда оно, как правило, называется 
	«тестированием на разрушение» (destructive testing) и представляет собой крайнюю форму 
	негативного тестирования
	Stress testing. A type of performance testing conducted to evaluate a system or component 
	at or beyond the limits of its antici￾pated or specified workloads, or with reduced 
	availability of resources such as access to memory or servers. [ISTQB Glossary]

	тест стабильности
	обьемное е (volume testing) — исследование производительности приложения при обработке 
	различных (как правило, больших) объёмов данных.
	Volume Testing. Testing where the system is subjected to large volumes of data. [ISTQB Glossary]

	конкурентное (concurrency testing) — исследование поведения приложения в ситуации, когда ему 
	приходится обрабатывать большое количество одновременно поступающих запросов, что вызывает 
	конкуренцию между запросами за ресурсы (базу данных, память, канал передачи данных, 
	дисковую подсистему и т.д.). Иногда под конкурентным тестированием понимают также 
	исследование работы многопоточных приложений и корректность синхронизации действий, 
	производимых в разных потоках.
	Concurrency testing. Testing to determine how the occurrence of two or more activities within 
	the same interval of time, achieved either by interleaving the activities or by simultaneous 
	execution, is handled by the component or system. [ISTQB Glossary]



тестирование совместимости (compatibility testing, interoperability testing)
— тестирование, направленное на проверку способности приложения работать в указанном окружении. 
	кроссплатформенное тестирование(конфигурационное тестирование), 
	(configura￾tion testing)Совместимость с аппаратной платформой, операционной системой и 
	сетевой инфраструктурой 
	Configuration Testing, Portability Testing. The process of testing to determine the 
	portability of a software product (the ease with which the software product can be transferred 
	from one hardware or software environment to another). 
	[ISTQB Glossary]

	кросс-браузерное тестирование, (cross-browser testing)
	Совместимость с браузерами и их версиями











18.3. Связанные с изменениями виды тестирования				
Дымовое тестирование (Smoke Testing)				
Регрессионное тестирование (Regression Testing)				
Повторное тестирование (Re-testing)		
new feature test		
Тестирование сборки (Build Verification Test)				
Санитарное тестирование или проверка согласованности/исправности (Sanity Testing)				
приемочное ??	
















19. Принципы тестирования (Principles of testing)				
				
				
1. Тестирование демонстрирует наличие дефектов (Testing shows presence of defects)				
Тестирование может показать, что дефекты присутствуют в системе, но не может доказать, что их нет.				
				
2. Исчерпывающее тестирование недостижимо (Exhaustive testing is impossible)				
Полное тестирование с использованием всех комбинаций вводов и предусловий физически невыполнимо, за исключением тривиальных случаев.				
				
3. Раннее тестирование (Early testing)				
Чтобы найти дефекты как можно раньше, активности по тестированию должны быть начаты как можно раньше в жизненном цикле разработки.				
				
4. Скопление дефектов (Defects clustering)				
Как правило, большая часть дефектов, обнаруженных при тестировании, содержится в небольшом количестве модулей.				
				
5. Парадокс пестицида (Pesticide paradox)				
Если одни и те же тесты будут прогоняться много раз, в конечном счете этот набор тестовых сценариев больше не будет находить новых дефектов.				
				
6. Тестирование зависит от контекста (Testing is context dependent)				
Тестирование выполняется по-разному в зависимости от контекста.				
				
7. Заблуждение об отсутствии ошибок (Absence-of-errors fallacy)				
Обнаружение и исправление дефектов не помогут, если созданная система не подходит пользователю и не удовлетворяет его ожиданиям и потребностям.				
				










				
20. Cтатическое и динамическое тестирование				
				
				
Статическое (static) тестирование	(верификация)			
Производится БЕЗ запуска кода программы.				
Примеры: тестирование требований/документации, код ревью, статические анализаторы кода.				
статическое (static testing) — тестирование без запуска кода на исполнение. В рамках этого 
подхода тестированию могут подвергаться:
 Документы (требования, тест-кейсы, описания архитектуры приложения, схемы баз данных и т.д.).
 Графические прототипы (например, эскизы пользовательского интерфейса).
 Код приложения
 Параметры (настройки) среды исполнения приложения.
 Подготовленные тестовые данные


Динамическое (dynamic) тестирование		(валидация)		
Производится С запуском кода программы.	
динамическое(dynamic testing) — тестирование с запускомкода на исполнение. Запускаться на исполнение 
может как код всего приложения целиком (системное тестирование), так и код нескольких взаимосвя-
занных частей (интеграционное тестирование), отдельных частей (модульное или компонентное тестирование) 
и даже отдельные участки кода			
				












				
21. Требования (requirements)				
				
				
"Требования - это спецификация (описание) того, что должно быть реализовано.

Требования описывают то, что необходимо реализовать, без детализации технической стороны решения. “Что”, а не “как”.			
				 
В требованиях указываются свойства, качества и особенности разрабатываемой программы


	Свойства качественных требований
● Завершенность (completeness). Требование является полным и законченным с точкизрения представления в нем всей необходимой информации, ничто не пропущено посоображениям «это и так всем понятно»
● Атомарность, единичность (atomicity). Требование является атомарным, если его нельзя разбить на отдельные требования без потери завершенности и оно описывает одну и только одну ситуацию. 
● Непротиворечивость, последовательность (consistency). Требование не должно содержать внутренних противоречий и противоречий другим требованиям и документам
● Недвусмысленность (unambiguousness, clearness). Требование должно быть описано без использования жаргона, неочевидных аббревиатур и расплывчатых формулировок, должно допускать только однозначное объективное понимание и быть атомарным в плане невозможности различной трактовки сочетания отдельных
фраз.
● Выполнимость (feasibility). Требование должно быть технологически выполнимым и
реализуемым в рамках бюджета и сроков разработки проекта
● Обязательность, нужность (obligatoriness) и актуальность (up-to-date). Если требование не является обязательным к реализации, оно должно быть просто исключено из набора требований
● Прослеживаемость (traceability)
● Модифицируемость (modifiability). Это свойство характеризует простоту внесения изменений в отдельные требования и в набор требований.
● Проранжированность по важности, стабильности, срочности (ranked for importance, stability, priority)
● Корректность (correctness) и проверяемость (verifiability)



	Требования
●   Требование (requirement) — описание того, какие функции и с соблюдением каких
условий должно выполнять приложение в процессе решения полезной для
пользователя задачи.
●   Требование (requirement): Условия или возможности, необходимые пользователю для
решения определенных задач или достижения определенных целей, которые должны
быть достигнуты для выполнения контракта, стандартов, спецификации, или других
формальных документов. 
(IEEE 610)
●   Спецификация (specification): Документ, описывающий (в идеале - исчерпывающе,
однозначно и доступно) требования, дизайн, поведение или иные характеристики
компонента или системы. Зачастую в спецификацию включаются процедуры
контроля исполнения. 
(ISTQB)
●   Спецификация компонента (component specification): Описание функций компонента в
терминах его выходных значений для заданных входных значений при определенных
условиях, а также требуемого нефункционального поведения (например,
использование ресурсов). 
(ISTQB)
●   Спецификация проектирования теста (test design specification): Документ,
описывающий тестовое условие (элементы покрытия) для элемента тестирования,
детализированный подход к тестированию, и идентифицирующий соответствующие
тестовые сценарии высокого уровня. 
(IEEE 829)
●   Спецификация процедуры тестирования (test procedure specification): Документ,
описывающий последовательность действий при выполнении теста. Также известен
как ручной сценарий тестирования. 
(IEEE 829)
●   Спецификация теста (test specification): Документ, состоящий из спецификации
проектирования теста, спецификации тестовых сценариев и/или спецификации
процедуры тестирования.
●   Спецификация тестовых сценариев (test case specification): Документ, описывающий
комплект тестовых сценариев - цель, входы, тестовые операции, ожидаемые
результаты и предусловия выполнения для объекта тестирования. (IEEE 829)

	техники выявления требований
● Интервью. Самый универсальный путь выявления требований,
заключающийся в общении проектного специалиста (как правило,бизнес-аналитика) и представителя 
заказчика (или эксперта, пользователя и т.д.). 
● Работа с фокусными группами. Может выступать как вариант «расширенного интервью», где источником информации является не одно лицо, а группа лиц(как правило, представляющих собой целевую аудиторию, и/или обладающихважной для проекта информацией, и/или уполномоченных принимать важные 
для проекта решения).
● Анкетирование. при неверной реализации может привести к нулевому результату при объемных затратах. В то же время при правильной организации анкетирование позволяет автоматически собрать и обработать огромноеколичество ответов от огромного количества респондентов. 
● Семинары и мозговой штурм. Семинары позволяют группе людей оченьбыстро обменяться информацией. Мозговой штурм может проводиться и как часть семинара, и как отдельный вид деятельности.
● Наблюдение. Может выражаться как в буквальном наблюдении за некимипроцессами, так и во включении проектного специалиста в эти процессы в качестве участника. 
● Прототипирование. Состоит в демонстрации и обсуждении промежуточных версий продукта (например, дизайн страниц сайта может быть сначала представлен в виде картинок, и лишь затем сверстан).
● Анализ документов. Хорошо работает тогда, когда эксперты в предметной области (временно) недоступны, а также в предметных областях, имеющих общепринятую устоявшуюся регламентирующую документацию. 
● Моделирование процессов и взаимодействий. Может применяться как к
«бизнес-процессам и взаимодействиям», так и к «техническим процессам и взаимодействиям» .
● Самостоятельное описание. Является не столько техникой выявления
требований, сколько техникой их фиксации и формализации. Очень сложно (и
даже нельзя!) пытаться самому «придумать требования за заказчика»

	уровни и типы требований
● Бизнес-требования (business requirements) выражают цель, ради которой разрабатывается продукт
● Пользовательские требования (user requirements) описывают задачи, которые
пользователь может выполнять с помощью разрабатываемой системы
● Бизнес-правила (business rules) описывают особенности принятых в предметной области (и/или непосредственно у заказчика) процессов, ограничений и иных правил
● Атрибуты качества (quality attributes) расширяют собой нефункциональные требования и на уровне пользовательских требований могут быть представлены в виде описания ключевых для проекта показателей качества
● Функциональные требования (functional requirements) описывают поведение системы, т.е. ее действия (вычисления, преобразования, проверки, обработку и т.д.)
● Нефункциональные требования (non-functional requirements) описывают свойства системы (удобство использования, безопасность, надежность, расширяемость и т.д.), которыми она должна обладать при реализации своего поведения
● Ограничения (limitations, constraints) представляют собой факторы, ограничивающие выбор способов и средств (в том числе инструментов) реализации продукта.
● Требования к интерфейсам (external interfaces requirements) описывают особенности взаимодействия разрабатываемой системы с другими системами и операционной средой
● Требования к данным (data requirements) описывают структуры данных (и сами данные), являющиеся неотъемлемой частью разрабатываемой системы
	


	Источники требований
● Международное, федеральное, муниципальное, ведомственное отраслевое
законодательство (конституция, законы и подзаконные акты, распоряжения,
ГОСТы);
● Нормативное обеспечение организации (регламенты, положения, уставы,
приказы);
● Текущая организация деятельности объекта автоматизации;
● Модели деятельности (диаграммы бизнес-процессов);
● Представления и ожидания потребителей и пользователей системы;
● Журналы использования существующих программно-аппаратных систем;
● Технологические возможности конечного пользователя;
● Конкурирующие программные продукты


	Виды документов требований
● Спецификация требований к программному обеспечению (SRS - Software Requirement Specification):
● Спецификация бизнес-требований (BRS - Business Requirement Specification): 
● Спецификация функциональных требований (FRS - Functional Requirement Specification):
● Документ бизнес-требований (BRD - Business Requirements Document, Business NeedsvSpecification, Business Requirements):
● Документ требований рынка (MRD - Market Requirements Document)
● Документ требований к продукту (PRD - Product Requirements Document) 
● Функциональная спецификация (FSD - Functional Specifications Document)
● Спецификация продукта (PSD - Product Specifications Document)
● Спецификация функционального дизайна (FDS - Functional Design Specification);
● Спецификация технического дизайна (TDS - Technical Design Specification);
				
				
				












22. Жизненный цикл бага 				
				
создан 
назначен на
приоритезирован
взят на работу
исправлен
ретест
если исправлен то закрыт, если не исправлен то опять назначен на кого либо 				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
23. SDLC/STLC					
				
				
"Software Development Life Cycle (SDLC):

Идея (Idea)
Сбор и анализ требований (Planning and Requirement Analysis)
Документирование требований (Defining Requirements)
Дизайн (Design Architecture)
Разработка (Developing)
Тестирование (Testing)
Внедрение/развертывание (Deployment)
Поддержка (Maintenance) Техническое обслуживание
Смерть (Death)"				




STLC ВХОДИТ В СОСТАВ SDLC

STLC
Жизненный цикл тестирования программного обеспечения
В процессе STLC выполняются различные действия для улучшения качества продукта
	сбор и Анализ требований
	Уточнение критериев приёмки
	тестплан/тест стратегия
	тест дизайн
	Настройка тестовой среды (тестового окружения)
	тестирование
	фиксация найденных багов
	анализ тестированния
	отчеты о тестировании

	определяет различные действия для улучшения качества продукта.
	аналитик тестов создает Систему, План тестирования интеграции
	команда тестирования готовит среду тестирования и выполняет контрольные примеры.
	охватывают только тестирование программного обеспечения.				
				
				







24. Методологии разработки 				
				




		Waterfall (каскадная модель, или «водопад»)
В этой модели разработка осуществляется поэтапно: каждая следующая стадия начинается только после того, как заканчивается предыдущая. Если всё делать правильно, «водопад» будет наиболее быстрой и простой моделью.
	Преимущества «водопада»
Разработку просто контролировать. Заказчик всегда знает, чем сейчас заняты программисты, может управлять сроками и стоимостью.
Стоимость проекта определяется на начальном этапе. Все шаги запланированы уже на этапе согласования договора, ПО пишется непрерывно «от и до».
Не нужно нанимать тестировщиков с серьёзной технической подготовкой. Тестировщики смогут опираться на подробную техническую документацию.
	Недостатки 
Тестирование начинается на последних этапах разработки. Если в требованиях к продукту была допущена ошибка, то исправить её будет стоить дорого. 
Заказчик видит готовый продукт в конце разработки и только тогда может дать обратную связь.

«Водопад» подходит для разработки проектов в медицинской и космической отрасли, где уже сформирована обширная база документов (СНиПов и спецификаций), на основе которых можно написать требования к новому ПО. 
При работе с каскадной моделью основная задача — написать подробные требования к разработке. На этапе тестирования не должно выясниться, что в них есть ошибка, которая влияет на весь продукт.


		V-образная модель
Это усовершенствованная каскадная модель
Очень упрощённо можно сказать, что при использовании v-образной модели на каждой стадии «на спуске» нужно думать о том, что и как будет происходить на соответствующей стадии «на подъёме».
Тестирование здесь появляется уже на самых ранних стадиях развития проекта, что позволяет минимизировать риски, а также обнаружить и устранить множество потенциальных проблем до того, как они станут проблемами реальными.
V-model. A framework to describe the software development lifecycle activities from requirements specification to maintenance. The V-model illustrates how testing activities can be integrated into each phase of the software development lifecycle. 
[ISTQB Glossary]



		Итерационная инкрементальная модель (iterative model, incremental model)
• с точки зрения жизненного цикла модель является итерационной, т.к. подразумевает многократное повторение одних и тех же стадий;
• с точки зрения развития продукта (приращения его полезных функций) модель является инкрементальной.
Ключевой особенностью данной модели является разбиение проекта на относительно небольшие промежутки (итерации), каждый из которых в общем случае может включать в себя все классические стадии, присущие водопадной и v-образной моделям . Итогом итерации является приращение (инкремент) функциональности продукта, выраженное в промежуточном билде.
к основным недостаткам этой модели часто относят высокие накладные расходы, вызванные высокой «бюрократизированностью» и общей громоздкостью модели



		Спиральная модель
представляет собой частный случай итерационной инкрементальной модели, в котором особое внимание уделяется управлению рисками, в особенности влияющими на организацию процесса разработки проекта и контрольные точки
каждый виток спирали это маленький ватерфол(водопадная модель)
	явно выделены четыре ключевые фазы:
• проработка целей, альтернатив и ограничений;
• анализ рисков и прототипирование;
• разработка (промежуточной версии) продукта;
• планирование следующего цикла.




		Гибкая модель (методология) (agile model) 
представляет собой совокупность различных подходов к разработке ПО и базируется на т.н.«agile-манифесте»:
• Люди и взаимодействие важнее процессов и инструментов.
• Работающий продукт важнее исчерпывающей документации.
• Сотрудничество с заказчиком важнее согласования условий контракта.
• Готовность к изменениям важнее следования первоначальному плану.




Kanban 

Kanban - визуальная доска 
доска на которой, например есть колонкb TO DO. In Progress. Done 
пепремещая задачу из колонки в колонку просматривается весь процесс разработки
желательно чтобы в колонке  In Progress было минимальное количество задач


Kanban и Scrum это фреймворки (методологии) использующие принципы и ценности Agile-manifesto

Плюсы Канбан-метода:
1. Визуализация работы. Использование доски Канбан позволяет командам легко видеть, какие задачи находятся в процессе выполнения
2. Гибкость. Канбан — это гибкий метод, который не предписывает определенный набор практик или ролей.
3. Ориентация на непрерывную постановку задач. Ориентация Канбан на непрерывное предоставление ценности означает, что команды могут работать над задачами по мере их поступления, а не ждать начала определенного спринта. 
4. Улучшенное сотрудничество. Использование визуальной доски и фокус на ограничении незавершенной работы может помочь командам более эффективно сотрудничать. Команды могут видеть, над какими задачами работают их коллеги, а это помогает сократить дублирование усилий и повысить общую эффективность.
 
Минусы Канбан:
1. Отсутствие структуры. Хотя гибкость Канбан может быть сильной стороной, она может быть и слабой стороной. Командам может быть трудно работать эффективно без определенного набора практик и ролей, что может привести к путанице и неэффективности.
2. Отсутствие временных рамок. Канбан не устанавливает конкретную продолжительность времени для работы
3. Ограниченное количество ретроспектив спринта. Одним из ключевых преимуществ Scrum является ретроспектива спринта, которая позволяет командам проанализировать свою работу и определить области для улучшения. В Kanban нет аналогичного процесса, и это может затруднить командам постоянное совершенствование рабочих процессов.
4. Отсутствие расстановки приоритетов. Канбан не устанавливает конкретные приоритеты для работы, и это может затруднить для команд определение того, какая работа должна быть выполнена в первую очередь. Командам может быть трудно определить, какая работа является наиболее важной, что может привести к задержкам и отсутствию прогресса.





Scrum

основные понятия
бэклог
список задач по проекту
есть бэклог всего проекта и бэклог спринта

спринт
итерация (цикл) разработки
промежуток времени в который прогнозируется выполнения задач проекта из бэклога (от 1 до 4 недель)

график сгорания задач(Burndown chart)
отчет о проведении тестирования в спринте

Скрам – это фреймворк с жесткими правилами и границами. Вы можете использовать разные инструменты и методологии внутри Скрама, но если вы отказались от чего-то обязательного в Скраме, он уже не может считаться Скрамом. Канбан – это метод, инструмент с набором практик и принципов. Вы можете использовать все практики, часть практик или не использовать их вообще. В Канбане нет строгого понятия, что есть Канбан, а что не есть Канбан. Однако, разумное использование практик может существенно помочь вам сделать сервис максимально качественным и соответствующим ожиданиям клиентов

5 плюсов Scrum
Ориентация на клиента и потребности бизнеса. Постоянное улучшение продукта, увеличение его ценности для пользователей.
Адаптивность, возможность быстро вносить изменения, гибко реагируя на изменения на рынке или другие важные обстоятельства. Не слепо следовать плану и расписанию, а уметь приоритезировать задачи, в зависимости от потребностей клиентов.
Прост в понимании и освоении, поэтому так популярен. Руководство занимает всего 17 страниц, одна из которых содержание. Ссылка в конце статьи.
Получение быстрых результатов, частые поставки изменений продукта, что позволяет доставлять ценность клиенту без промедления.
Практически не требует менеджерской работы, для настройки процессов есть скрам-мастер. команда самоорганизована и кроссфункциональна. Важно мнение каждого члена команды.

5 минусов Scrum
Недостаточно проработанная документация, не всегда хватает на это времени. Если на проекте важно скрупулезное ведение документации, то нужно сразу вводить для этого соответствующую роль.
Нужна активная вовлеченность клиента в процесс разработки, без нее — снижение эффективности. Клиент обеспечивает своевременное формирование и приоритезация продукт-бэклога.
Не всегда подходит для крупных проектов и компаний из-за ограничения по ведению документации и затруднения коммуникации между командами. Для крупных проектов лучше подойдет SAF.
Опасность навешивания на скрам-мастера менеджерских функций “по старинке”, скрам-мастер фасилитирует процессы, а не распределяет задачи.
До скрама нужно дорасти, команда должна иметь определенную степень зрелости и сработанности (гибкий ум, мотивированность, взаимное уважение, работа на результат), ведь качество работы каждого члена влияет на производительность команды.




Scrum-ban "	












25. пользовательская история (User Story)
способ описания требований к разрабатываемой системе, сформулированных как одно или несколько 
предложений на повседневном или деловом языке пользователя. Пользовательские истории – это 
один из самых быстрых способов документирования требований клиента 
(цель документирования состоит в том, чтобы оперативно, без затрат реагировать на возникающие изменения).
Главное действующее лицо User story – это некий персонаж, который будет совершать какие-либо 
действия с нашим тестируемым продуктом с учетом его потребностей. 
Персонаж сопровождается описанием проблем, которые он может (и хочет) решить с помощью нашего продукта. 
Потребность представляет собой тезис в 1-2 предложения. Для одного пользователя может быть 
разработано несколько (например, 4-6) User Story.
Персонаж – типичный представитель целевой аудитории компании














26. Отчёт о тестировании (test progress report, test summary report)

документ который показывает нам то как прошло наше тестирование в рамках 
определенного временного промежутка
Test progress report. A document summarizing testing activities and results, produced at regular 
intervals, to report progress of testing activities against a baseline (such as the original test plan) 
and to communicate risks and alternatives requiring a decision to management. 
[ISTQB Glossary]
Test summary report. A document summarizing testing activities and results. It also contains 
an evaluation of the corresponding test items against exit criteria. 
[ISTQB Glossary]
	задачи:
• оценка объёма и качества выполненных работ;
• оценка текущего статуса и прогресса (в сравнении с планом);
• обозначение существующих и возможных проблем (если такие есть);
• формирование прогноза развития ситуации и фиксация рекомендаций по 
устранению проблем и повышению эффективности работы.

	типы отчетов
финальный
промежуточный(недельный, месячный, дневной, версионный(итерационный), финальный)
	разделы отчета по результатам тестирования
конкретных устоявшихся разделов для отчета - нет, это только некоторые из:
Краткое описание (summary). В предельно краткой форме отражает основные достижения, проблемы, выводы и 
  рекомендации. 
состав команды
сроки/расписание
описание процессов тестирования
дополнения к тестовым кейсам
статистика пройденных кейсов
критичные баги
результаты регрессионного тестирования
планы (только для промежуточных)
	ссылки (шаблоны отчетов)
https://vk.com/@usetalkrostov-otchet-o-testirovanii-reliza
https://www.performance-lab.ru/wp-content/themes/pureengineering/images/sitetesting/test_report_example.pdf
















27. Оценка трудозатрат в тестировании (эстимация)

эстимацию проводят менеджеры или специалисты middle++
	цели эстимации
определение сроков
оплата (Fixed Price известна сумма которую оплатит заказчик(не большой проект с малым кол-м изменений), 
Time & Material изначально неизвестна сумма заказа(удобно для Agile)для больших проектов)
оптимизация работы
и тд
	методы эстимации
Декомпозиция + By Test Cases(разбиение продукта на модули, фичи, таски)тесткейс единица измерения 
Based on Development(расчет времени от времени разработки, очень грубый метод)
По трем точкам(используется 3 временные точки)
На основе опыта
Пальцем в небо
Метод процентного распределения

	Декомпозиция + By Test Cases
расчет общего количества проверок на проекте(тест кейсов)
расчет средних затрат на один тест кейс(расчет среднего времени на выполнение всех тест кейсов)
  (время на написание 1го т.кейса + время на еговыполнение + умножение на общее кол. тестов)
определение количества возможных багов, и  на работу над 1 дефектом
расчет рисков и дополниттельного времени(коммуникация, изменения,подготовка чаще всего
это около 30%)
расчет общей суммы(времени)

	По трем точкам(О-оптимистичная точка, М(midle)-средняя, Р-пессимистическая)
(О + 4М + Р)/6
О - основная работа без рисков
P - времи с рисками
М - среднее время, наиболее вероятное
Стандартное отклонение
(Р - О)/6









28. Метрики. 			

Метрика (metric) — числовая характеристика показателя качества. Мо-
жет включать описание способов оценки и анализа результата.
Metric. A measurement scale and the method used for measurement. [ISTQB Glossary]

	метрики используют для:
• принятия решений о начале, приостановке, возобновлении или прекращении тестирования
• определения степени соответствия продукта заявленным критериям качества;
• определения степени отклонения фактического развития проекта от плана;
• выявления «узких мест», потенциальных рисков и иных проблем;
• оценки результативности принятых  решений;
• подготовки  отчётности;


	пример метрик:
• процентное отношение (не) выполненных тест-кейсов ко всем имеющимся;
• процентный показатель успешного прохождения тест-кейсов 
• процентный показатель заблокированных тест-кейсов;
• плотность распределения дефектов;
• эффективность устранения дефектов;
• распределение дефектов по важности и срочности;
• Метрика покрытия требований
• Метрика плотности покрытия требований ( сколько тест-кейсов ссылается на несколько требований)
• Метрика покрытия классов эквивалентности (сколько классов эквивалентности затронуто тест-кейсами)
• и т.д.


Покрытие (coverage) — процентное выражение степени, в которой исследуемый элемент (coverage item) 
затронут соответствующим набором тест-кейсов
Coverage, Test coverage. The degree, expressed as a percentage, to which a specified coverage 
item has been exercised by a test suite. 
[ISTQB Glossary]
Coverage item. An entity or property used as a basis for test coverage, e.g. equivalence partitions 
or code statements. 
[ISTQB Glossary]
(требование считается «покрытым», если на него ссылается хотя бы один тест-кейс)


𝑅𝑖𝑚𝑝𝑙𝑒𝐶𝑜𝑣𝑒𝑟𝑎𝑔𝑒 =𝑅𝐶𝑜𝑣𝑒𝑟𝑒𝑑/𝑅𝑇𝑜𝑡𝑎𝑙 ∙ 100%,		 где
𝑅𝑆𝑖𝑚𝑝𝑙𝑒𝐶𝑜𝑣𝑒𝑟𝑎𝑔𝑒 — метрика покрытия требований,
𝑅𝐶𝑜𝑣𝑒𝑟𝑒𝑑 — количество требований, покрытых хотя бы одним тест-кейсом,
𝑅𝑇𝑜𝑡𝑎𝑙 — общее количество требований.

















29. классификация тестирования по позитивности 

			классификация тестирования



		по позитивности
позитивное — е (positive testing) направлено на исследование приложения в ситуации, когда все 
действия выполняются строго по инструкции без каких бы то ни было ошибок, отклонений, 
ввода неверных данных и т.д.

негативное — е (negative testing, invalid testing) — направлено на исследование работы приложения 
в ситуациях, когда с ним выполняются (некорректные) операции и/или используются данные, 
потенциально приво-дящие к ошибкам 
Negative testing. Tests aimed at showing that a component or system does not work. Negative testing 
is related to the testers’attitude rather than a specific test approach or test design technique, 
e.g. testing with invalid input values or exceptions. 
[ISTQB Glossary]
Invalid testing. Testing using input values that should be rejected by the component or system. 
[ISTQB Glossary]














30. классификация	тестирования по степени важности тестируемых функций

SMOKE — (smoke test, intake test, build verification test) 
направлено на проверку самой главной, самой важной, самой ключевой функциональности, 
неработоспособность которой делает бессмысленной саму идею использования приложения 
(или иного объекта, подвергаемого дымовому тестированию).
когда для проверки основной функции можно использовать несколько путей для ее достижения
проверяют все эти пути, в этом случае получается smoke extended(расширенный)

тест критического пути (critical path test) направлено на исследование функциональности, 
используемой типичными пользователями в типичной повседневной деятельности, проводится 
после дымного тестирования. Пороговое значение метрики успешного прохождения 
«теста критического пути» уже немного ниже, чем в дымовом тестировании, но всё равно достаточно высоко
(как правило, порядка 70–80–90 % — в зависимости от сути проекта).

расширенный тест - (extended test) направлено на исследование всей заявленной в требованиях 
функциональности — даже той, которая низко проранжирована по степени важности. Но при наличии 
достаточного количества времени и иных ресурсов тест-кейсы этого уровня могут затронуть даже 
самые низкоприоритетные требования. Пороговое значение метрики успешного прохождения расширен-
ного тестирования (иногда можно увидеть даже значения в диапазоне 30–50 %, т.к. подавляющее 
большинство найденных здесь дефектов не представляет угрозы для успешного использования 
приложения большинством пользователей)










31.		по степени автоматизации


ручное тестирование (manual testing)
автоматизированное тестирование (automated testing, test automation)










32. классификация тестирования по знанию кода

тестирование черного ящика (black box testing, closed box testing, specification￾based testing) — 
у тестировщика либо нет доступа к внутренней структуре и коду приложения, либо недостаточно знаний 
для их понимания, либо он сознательно не обращается к ним в процессе тестирования.
Black box testing. Testing, either functional or non-functional, without reference to the internal 
structure of the component or system. [ISTQB Glossary]

тестирование белого ящика (white box testing, open box testing, clear box testing, glass box testing) 
— у тестировщика есть доступ к внутренней структуре и коду приложения, а также есть достаточно знаний 
для понимания увиденного
White box testing. Testing based on an analysis of the internal structure of the component or system. 
[ISTQB Glossary]
	процесс тестирования белого ящика:
● Анализируется реализация программы.
● В программе определяются возможные маршруты.
● Выбираются такие входные данные, чтобы программа выполнила выбранные пути. Это называется
сенсибилизацией путей. Заранее определяются ожидаемые результаты для входных данных.
● Тесты выполняются.
● Фактические результаты сравниваются с ожидаемыми результатами.
● Принимается решение о надлежащем или ненадлежащем функционировании программы.
	недостатки
● количество выполняемых путей может быть настолько большим, что не удастся
проверить их все. Как правило, попытка протестировать все пути выполнения с помощью
тестирования белого ящика так же невозможна, как и тестирование всех комбинаций всех входных
данных при тестировании черного ящика.
● выбранные тест-кейсы могут не содержать данные, которые будут чувствительны к ошибкам. 
● тестирование белого ящика предполагает, что поток управления правильный (или
близок к правильному). Поскольку эти тесты основаны на существующих путях, с помощью нельзя
обнаружить несуществующие пути.
● тестировщик должен обладать навыками программирования 
	техники тестирования белого ящика
● Тестирование потока управления​ - С помощьюданной техники тестирования определяются пути выполнения 
кода программного модуля, после чегосоздаются и исполняются тест-кейсы для покрытия этих путей.
Основой тестирования потока управления являются графы потока управления
● Тестирование потока данных -  инструмент для обнаружения неправильного использования значений 
данных, возникшего из-за ошибок в коде

тестирование серого ящика  (gray box testing) — комбинация методов белого ящика и чёрного ящика, 
состоящая в том, что к части кода и архитектуры у тестировщика доступ есть, а к части — нет











33. классификация по цели тестирования

New feature test

Повторное тестирование (re-testing, confirmation testing) — выполнение тест-кейсов, которые ранее 
обнаружили дефекты, с целью подтверждения устранения дефектов. Фактически этот вид тестирования 
сводится к действиям на финальной стадии жизненного цикла отчёта о дефекте, направленным на то, 
чтобы перевести дефект в состояние «проверен» и «закрыт».
Re-testing, Confirmation testing. Testing that runs test cases that failed the last time they were run,
in order to verify the success of corrective actions. 
[ISTQB Glossary]

Регрессионное тестирование (regression testing) — тестирование, направленное на проверку того факта, 
что в ранее работоспособной функциональности не появились ошибки, вызванные изменениями
(после исправления багов) в приложении или среде его функционирования. Фредерик Брукс в своей книге  
писал: «Фундаментальная проблема при сопровождении программ состоит в том, что исправление одной ошибки
с большой вероятностью (20–50 %) влечёт появление новой». Потому регрессионное тестирование является 
неотъемлемым инструментом обеспечения качества и активно используется практически в любом проекте
  проводится в каждом билде
  проверка исправленных багов
  проверка связанных функциональностей
  проверяется несколько раз
  часто автоматизируют
Выбор тестов для регрессии:
  безопасность, критичные функции
  часто меняющиеся области
  тесты области с высокой вероятностью ошибки
Регрессия может быть локальной и расширенной(extendet)
локальная. тестирование части функциональностей, которые потенциально могли быть затронуты при изменении
кода(3-4 функциональности из 15, например)
расширенная регрессия- тестирование всего функционала
Regression testing. Testing of a previously tested program following modification to ensure 
that defects have not been introduced or uncovered in unchanged areas of the software, as a result of 
the changes made. It is performed when the software or its environment is changed. 
[ISTQB Glossary]










34. классификация по исполнению сценария

сценарное (на основе тест-кейсов)(scripted testing, test case based test￾ing) — формализованный подход, 
в котором тестирование производится на основе заранее подготовленных тест-кейсов, 
наборов тест-кейсов и иной до-кументации.
Scripted testing. Test execution carried out by following a previously documented sequence of tests. 
[ISTQB Glossary]

исследовательское(на основе чек листов)(exploratory testing) 

интуитивное (ad hoc testing) 











35. дополнительные виды классификации тестирования

подробное дополнение классификации


		тестирование по природе приложения 
мобильное (mobile applications testing)
WEB (web-applications testing)
десктопное (desktop applications testing)

		тестирование по уровню архитектуры приложения
уровень представления (presentation tier testing) сконцентрировано на той части приложения, 
которая отвечает за взаимодействие с «внешним миром» (как пользователями, так и другими приложениями). 
Здесь исследуются вопросы удобства использования, скорости отклика интерфейса, совместимости с 
браузерами, корректности работы интерфейсов.

уровень бизнес-логики  (business logic tier testing) отвечает за проверку основного набора функций 
приложения и строится на базе ключевых требований к приложению, бизнес-правил и общей проверки 
функциональности.

уровень данных (data tier testing) сконцентрировано на той части приложения, которая отвечает за 
хранение и некоторую обработку данных (чаще всего — в базе данных или ином хранилище). 
Здесь особый интерес представляет тестирование данных, проверка соблюдения бизнес-правил, 
тестирование производительности.

		на основе (знания) источников ошибок
Тестирование предугадыванием ошибок (error guessing) — техника тестирования, в которой тесты 
разрабатываются на основе опыта тестировщика и его знаний о том, какие дефекты типичны для тех или 
иных компонентов или областей функциональности приложения. Может комбинироваться с техникой 
т.н. «ошибкоориентированного» тестирования (failure-directed testing), в котором новые тесты 
строятся на основе информации о ранее обнаруженных в приложении проблемах.
Error Guessing. A test design technique where the experience of the tester is used to anticipate 
what defects might be present in the component or system under test as a result of errors made, 
and to design tests specifically to expose them. 
[ISTQB Glossary]

Эвристическая оценка (heuristic evaluation) — техника тестирования удобства использования,  
направленная на поиск проблем в интерфейсе пользователя, представляющих собой отклонение от 
общепринятых норм.
Heuristic Evaluation. A usability review technique that targets usability problems in the user 
interface or user interface design. With this technique, the reviewers examine the interface and 
judge its compliance with recognized usability principles (the «heu￾ristics»). 
[ISTQB Glossary]

Мутационное тестирование (mutation testing) — техника тестирования, в которой сравнивается поведение 
нескольких версий одного и того же компонента, причём часть таких версий может быть специально 
разработана с добавлением ошибок (что позволяет оценить эффективность тест-кейсов — качественные 
тесты обнаружат эти специально добавленные ошибки). Может комбинироваться со следующим в этом списке 
видом тестирования (тестированием добавлением ошибок).
Mutation Testing, Back-to-Back Testing. Testing in which two or more variants of a component or system 
are executed with the same inputs, the outputs compared, and analyzed in cases of discrepancies. 
[ISTQB Glossary]

Тестирование добавлением ошибок (error seeding) — техника тестирования, в которой в приложение 
специально добавляются заранее известные, специально продуманные ошибки с целью мониторинга их 
обнаружения и устранения и, таким образом, формирования более точной оценки показателей процесса 
тестирования. Может комбинироваться с предыдущим в этом списке видом тестирования 
(мута-ционным тестированием).
Error seeding. The process of intentionally adding known faults to those already in a computer program 
for the purpose of monitoring the rate of detection and removal, and estimating the number of faults 
remaining in the program. 
[ISTQB Glossary]

		на основе среды выполнения
Тестирование в процессе разработки (development testing) — тестирование, выполняемое непосредственно 
в процессе разработки приложения и/или в среде выполнения, отличной от среды реального использования 
приложения. Как правило, выполняется самими разработчиками.
Development testing. Formal or informal testing conducted during the implementation of a component 
or system, usually in the development environment by developers. 
[ISTQB Glossary]

операционное тестирование (operational testing) — тестирование, проводимое в реальной или 
приближенной к реальной операционной среде (operational environment), включающей операционную систему, 
системы управления базами данных, серверы приложений, веб-серверы, аппаратное обеспечение и т.д.
Operational testing. Testing conducted to evaluate a component or system in its operational environment.
[ISTQB Glossary]
Operational environment. Hardware and software products installed at users’ or customers’ sites where 
the component or system under test will be used. The software may include operating systems, 
database management systems, and other applications. 
[ISTQB Glossary]

		по степени вмешательства в работу приложения
Инвазивное тестирование (intrusive testing) — тестирование, выполнение которого может повлиять 
на функционирование приложения в силу работы инструментов тестирования (например, будут искажены 
показатели производительности) или в силу вмешательства (level ofintrusion) в сам код приложения 
(например, для анализа работы при-ложения было добавлено дополнительное протоколирование, включён 
вывод отладочной информации и т.д.). Некоторые источники рассматривают инвазивное тестирование как 
форму негативного или даже стрессового тестирования
Level of intrusion. The level to which a test object is modified by adjusting it for testability. 
[ISTQB Glossary]

неинвазивное е (nonintrusive testing) — тестирование, выполнение которого незаметно для приложения 
и не влияет на процесс его обычной работы.

		на основе кода
Тестирование по потоку управления (control flow testing) — семейство техник тестирования, в которых 
тест-кейсы разрабатываются с целью активации и проверки выполнения различных последовательностей 
событий, которые определяются посредством анализа исходного кода приложения. 
Control Flow Testing. An approach to structure-based testing in which test cases are designed to 
execute specific sequences of events. Various techniques exist for control flow testing, e.g., 
decision testing, condition testing, and path testing, that each have their specific approach and 
level of control flow coverage. [ISTQB Glossary]

Тестирование по потоку данных (data-flow testing) — семейство техник тестирования, основанных на 
выборе отдельных путей из потока управления с целью исследования событий, связанных с изменением 
состояния переменных. 
Data Flow Testing. A white box test design technique in which test cases are designed to execute 
definition-use pairs of variables. [ISTQB Glossary]


Тестирование по диаграмме или таблице состояний (state transition testing) — техника тестирования, 
в которой тест-кейсы разрабатываются для проверки переходов приложения из одного состояния в дру-
гое. Состояния могут быть описаны диаграммой состояний (state dia￾gram) или таблицей состояний 
(state table) 
State Transition Testing. A black box test design technique in which test cases are designed 
to execute valid and invalid state transitions. [ISTQB Glossary]

Инспекция (аудит) кода (code review, code inspection) — семейство техник повышения качества кода за 
счёт того, что в процессе создания или совершенствования кода участвуют несколько человек. Степень 
формализации аудита кода может варьироваться от достаточно беглого просмотра до тщательной формальной 
инспекции. В отличие от техник статического анализа кода (по потоку управления и потоку данных) 
аудит кода также улучшает такие его характеристики, как понятность, поддерживаемость, соответствие 
соглашениям об оформлении и т.д. Аудит кода выполняется в основном самими программистами.
Inspection. A type of peer review that relies on visual examination of documents to detect defects, 
e.g. violations of development standards and non-conformance to higher level documentation. 
The most formal review technique and therefore always based on a documented procedure. 
[ISTQB Glossary]


		на основе структур кода
Тестирование на основе выражений (statement testing) — техника тестирования (по методу белого ящика), 
в которой проверяется корректность (и сам факт) выполнения отдельных выражений в коде. 
Statement Testing. A white box test design technique in which test cases are designed to execute 
statements (statement is an entity in a programming language, which is typically the smallest 
indivisible unit of execution). [ISTQB Glossary]

Тестирование на основе ветвей (branch testing) — техника тестирования (по методу белого ящика), 
в которой проверяется выполнение отдельных ветвей кода (под ветвью понимается атомарная часть кода, 
выполнение которой происходит или не происходит в зависимости от истинности или ложности некоторого 
условия).
Branch Testing. A white box test design technique in which test cases are designed to execute branches 
(branch is a basic block that can be selected for execution based on a program construct in which one 
of two or more alternative program paths is available, e.g. case, jump, go to, if-then-else.). 
[ISTQB Glossary]

Тестирование на основе условий (condition testing) — техника тестирования (по методу белого ящика), 
в которой проверяется выполнение отдельных условий (условием считается выражение, которое может быть 
вычислено до значения «истина» или «ложь»).
Condition Testing. A white box test design technique in which test cases are designed to execute 
condition outcomes (condition is a logical expression that can be evaluated as True or False, 
e.g. A > B). [ISTQB Glossary]

Тестирование на основе комбинаций условий (multiple condition testing) — техника тестирования 
(по методу белого ящика), в которой проверяется выполнение сложных (составных) условий.
Multiple Condition Testing. A white box test design technique in which test cases are designed 
to execute combinations of single condition outcomes (within one statement). 
[ISTQB Glossary]

Тестирование на основе отдельных условий, порождающих ветвление («решающих условий») 
(modified condition decision coverage testing) — техника тестирования (по методу белого ящика), 
в которой проверяется выполнение таких отдельных условий в составе сложных условий, которые в одиночку 
определяют результат вычисления всего сложного условия.

Тестирование на основе решений (decision testing) — техника тестирования (по методу белого ящика), 
в которой проверяется выполнение сложных ветвлений (с двумя и более возможными вариантами). 
Несмотря на то что «два варианта» сюда также подходит, формально такую ситуацию стоит отнести к 
тестированию на основе условий.
Decision Testing. A white box test design technique in which test cases are designed to execute 
decision outcomes (decision is program point at which the control flow has two or more alternative 
routes, e.g. a node with two or more links to separate branches). 
[ISTQB Glossary]

Тестирование на основе путей (path testing) — техника тестирования (по методу белого ящика), в 
которой проверяется выполнение всех или некоторых специально выбранных путей в коде приложения
Path testing. A white box test design technique in which test cases are designed to execute paths. 
[ISTQB Glossary]


		по техникам автоматизации
под управлением данными DDT (data-driven testing) —способ разработки автоматизированных тест-кейсов, 
в котором входные данные и ожидаемые результаты выносятся за пределы тест-кейса и хранятся вне его — 
в файле, базе данных и т.д.
Data-driven Testing (DDT). A scripting technique that stores test input and expected results in a 
table or spreadsheet, so that a single control script can execute all of the tests in the table. 
Data-driven testing is often used to support the application of test execution tools such as 
capture/playback tools. [ISTQB Glossary]

под управлением ключевыми словами KDT (keyword￾driven testing) — способ разработки автоматизированных 
тест-кейсов, в котором за пределы тест-кейса выносится не только набор входных данных и ожидаемых 
результатов, но и логика поведения тест-кейса, которая описывается ключевыми словами (командами)
Keyword-driven Testing (KDT). A scripting technique that uses data files to contain not only test 
data and expected results, but also keywords related to the application being tested. 
The keywords are interpreted by special supporting scripts that are called by the control script or 
the test. 
[ISTQB Glossary]

под управлением поведением BDT (behavior-driven test￾ing) — способ разработки автоматизированных 
тест-кейсов, в котором основное внимание уделяется корректности работы бизнес-сценариев, а не отдельным 
деталям функционирования приложения


		другие виды тестирования
Сравнительное тестирование (comparison testing) — тестирование, направленное на сравнительный анализ 
преимуществ и недостатков разрабатываемого продукта по отношению к его основным конкурентам.

Демонстрационное тестирование (qualification testing) — формальный процесс демонстрации заказчику 
продукта с целью подтверждения, что продукт соответствует всем заявленным требованиям. 
В отличие от приёмочного тестирования этот процесс более строгий и всеобъемлющий, но может проводиться 
и на промежуточных стадиях разработки продукта.

Исчерпывающее тестирование (exhaustive testing) — тестирование приложения со всеми возможными 
комбинациями всех возможных входных данных во всех возможных условиях выполнения. Для сколь бы то 
ни было сложной системы нереализуемо, но может применяться для проверки отдельных крайне простых 
компонентов
















36. a/b testing

можно 
встретить трактовку A/B-тестирования как технику тестирования удобства использования, в которой пользователям 
случайным образом предлагаются разные варианты элементов интерфейса, после чего 
оценивается разница в реакции пользователей.


















37. Чем отличается системное тестирование от сквозного (E2E - end-to-end testing)?

Сквозное тестирование - это методология тестирования программного обеспечения для тестирования flow приложения от начала до конца. Целью сквозного тестирования является моделирование реального пользовательского сценария и проверка тестируемой системы и ее компонентов на предмет интеграции и целостности данных.
Системное тестирование - этап предпоследний этап STLC и уровень тестирования, а E2E - подход к тестам. Обычно сквозные тесты выполняют после системного тестирования и перед приемочным, а также после внесения изменений (smoke и regression). E2E выполняется от начала до конца в реальных сценариях, таких как взаимодействие приложения с оборудованием, сетью, базой данных и другими приложениями. Основная причина проведения этого тестирования - определение различных зависимостей приложения, а также обеспечение передачи точной информации между различными компонентами системы.










38. Санити тестирование (Sanity testing)

Тест работоспособности (sanity test): См. тест "на дым". (ISTQB)
Другие источники:
Sanity testing также является подмножеством регрессионного тестирования и выполняется до или вместо полной регрессии, но после smoke. Эти два подвида похожи, но в целом Sanity используется на более стабильных билдах для определения работоспособности определенной части приложения после внесения изменений.
Примечание. Санитарным это тестирование в русскоязычной среде назвалось по совершенно непонятным причинам, но гуглится только так. На самом же деле дословно переводится как тестирование на вменяемость / разумность / работоспособность / согласованность или по версии ISTQB “Тест работоспособности”.








39.  Когда начинать и заканчивать тестирование?

Тестирование следует начинать, как только оно становится возможным. Например, тестирование бизнес-требований. Завершать следует тогда, когда его продолжение обойдется дороже, чем остановка.

Следует выделить 3 основных критерия для остановки, завершения тестирования:
Время
Бюджет
Все тест кейсы пройдены, найденные баги исправлены и перепроверены






40.  Перечислите характеристики качества программного обеспечения и их атрибуты.

Атрибуты оценки качества -
функциональность;
производительность (обычно пиковая);
системность (совместимость в системе);
надежность (отказостойкость, самовосстанавливаемость);
защищенность (управление вероятными уязвимостями, отказами);
дружественность (простота, легкость, комфортность при работе)
Они могут быть внешними и внутренними. На внутренних атрибутах основываются внешние и внутренние метрики качества, которые служат для количественной оценки программного обеспечения.





41. Что такое SRS
Software requirements specification — один из самых важных документов в разработке программного обеспечения. Он описывает работу ПО, его функции и нагрузки. Проще говоря, SRS предоставляет всем участникам дорожную карту для проекта.

Спецификация требований программного обеспечения описывает функциональные и нефункциональные требования. Часто в документ включают варианты использования, которые иллюстрируют, как пользователь будет взаимодействовать с системой.

Преимущества SRS
Software requirements specification является основой проекта. Документ закладывает базу, которой будут следовать все участники команды разработки.
Спецификации требований к программному обеспечению — это способ более четкой коммуникации. Этот инструмент помогает быть уверенным в том, что все участники процесса правильно понимают друг друга.
Написание SRS также может минимизировать общее время и затраты на разработку. Команды разработчиков встроенных систем особенно выигрывают от использования SRS.
Такая документация помогает избежать дальнейших улучшений и изменений в проекте, которые задерживают завершение или приводят к дополнительным расходам.







42. Риск

Риск - это возникновение неопределенного события, которое положительно или отрицательно влияет на измеримые критерии успеха проекта. Это могут быть события, которые произошли в прошлом или текущие события, или что-то, что может произойти в будущем. Эти неопределенные события могут повлиять на стоимость, бизнес, технические и качественные цели проекта.

Project Risks: бюджет, ресурсы, график, проблемы, связанные с клиентами и т. д.

Technical Risks: Технический риск включает риски на этапах проектирования, внедрения, тестирования и разработки. Большинство технических рисков возникает либо на этапе требований, либо во время кодирования, поскольку неясность требований может привести к серьезным рискам во время разработки. Во-вторых, на этапе разработки, если разработчики недостаточно хорошо знакомы с Продуктом, это также может привести к серьезным рискам.

Business Risks: Бизнес-риски включают проблемы с бюджетом и созданием проекта, который не соответствует требованиям заказчика, потерю клиента.













43.	Свойства качественных требований

● Завершенность (completeness). Требование является полным и законченным с точкизрения представления в нем всей необходимой информации, ничто не пропущено посоображениям «это и так всем понятно»
● Атомарность, единичность (atomicity). Требование является атомарным, если его нельзя разбить на отдельные требования без потери завершенности и оно описывает одну и только одну ситуацию. 
● Непротиворечивость, последовательность (consistency). Требование не должно содержать внутренних противоречий и противоречий другим требованиям и документам
● Недвусмысленность (unambiguousness, clearness). Требование должно быть описано без использования жаргона, неочевидных аббревиатур и расплывчатых формулировок, должно допускать только однозначное объективное понимание и быть атомарным в плане невозможности различной трактовки сочетания отдельных
фраз.
● Выполнимость (feasibility). Требование должно быть технологически выполнимым и
реализуемым в рамках бюджета и сроков разработки проекта
● Обязательность, нужность (obligatoriness) и актуальность (up-to-date). Если требование не является обязательным к реализации, оно должно быть просто исключено из набора требований
● Прослеживаемость (traceability)
● Модифицируемость (modifiability). Это свойство характеризует простоту внесения изменений в отдельные требования и в набор требований.
● Проранжированность по важности, стабильности, срочности (ranked for importance, stability, priority)
● Корректность (correctness) и проверяемость (verifiability)
==================================================================================================




monkey testing

Monkey testing - произвольное тестирование продукта с целью как можно быстрее, используя различные вариации входных данных, нарушить работу программы или вызвать ее остановку (простыми словами - сломать);



use case
Use case (в переводе с англ. «вариант использования») — это часть такого документа. Он описывает, какие действия выполняет пользователь и как система должна на них реагировать. Пример простейшего use case: пользователь заполнил поля формы, а система должна сохранить введённые данные.

user story
способ описания требований к разрабатываемой системе, сформулированных как одно или несколько 
предложений на повседневном или деловом языке пользователя. Пользовательские истории – это 
один из самых быстрых способов документирования требований клиента 

тест сценарий
последовательность шагов, которые пользователь может предпринять, чтобы использовать ваше программное обеспечение. 